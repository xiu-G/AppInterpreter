<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	view_photo_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	view_photo_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.StackTraceElement: java.lang.String getFileName()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	view_photo_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	view_photo_activity.xml:['memory']	app['memory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	view_photo_activity.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	view_photo_activity.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.TimerTask: boolean cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_activity.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	show_fate_activity.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	show_fate_activity.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	show_fate_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.addextras.contacts_people: void <init>()>	app:[]	app[]
<android.addextras.com.android.contacts: void <init>()>	app:[]	app[]
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.addextras.phone_contacts: void <init>()>	app:['phone']	app['phone']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: int get(int)>	app:[]	app[]
<android.media.SoundPool: int load(android.content.Context,int,int)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound', 'play']	app['sound', 'play']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	view_photo_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	view_photo_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	view_photo_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	view_photo_activity.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaRecorder: int getMaxAmplitude()>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	app:['port']	app['port']	ui-unmatch
<android.net.Proxy: java.lang.String getHost(android.content.Context)>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getPort(android.content.Context)>	app:['port']	app['port']	ui-unmatch
<android.addextras.telephony_carriers_preferapn: void <init>()>	app:['telephony']	app['telephony']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: int getSimState()>	phone_invite_activity.xml:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.addextras.phone_use_kk: void <init>()>	invite_kxfriend_activity.xml:['phone']	app['phone']	ui-unmatch
<android.addextras.phone_unuse_kk: void <init>()>	invite_kxfriend_activity.xml:['phone']	app['phone']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.addextras.latitude: void <init>()>	contacts_activity.xml:['latitude']	app['latitude']	ui-unmatch
<android.addextras.longitude: void <init>()>	contacts_activity.xml:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	write_message_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	write_message_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	write_message_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	write_message_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	write_message_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	write_message_activity.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	view_photo_activity.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	profile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	profile_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	profile_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	profile_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	profile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	profile_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	profile_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	profile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	profile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	profile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.net.NetworkInfo: int getType()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: java.lang.String getHost(android.content.Context)>	app:['host']	app['host']	ui-unmatch
<android.addextras.noConnectivity: void <init>()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.addextras.networkInfo: void <init>()>	app:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	app:['port']	app['port']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.addextras.URL_ARRAY: void <init>()>	view_photo_activity.xml:['url']	app['url']	ui-unmatch
<android.addextras.CURR_URL: void <init>()>	view_photo_activity.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	view_photo_activity.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderFieldKey(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.SoundPool: int load(android.content.Context,int,int)>	app:['sound']	app['sound']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player', 'play']	app['medium', 'player', 'play']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	profile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	profile_activity.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.Socket: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	app:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.Socket: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	myprofile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	myprofile_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	myprofile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	myprofile_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	myprofile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	myprofile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	myprofile_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.SoundPool: void <init>(int,int,int)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	myprofile_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void <init>()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.Socket: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress,int)>	app:['connect']	app['connect']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress,int)>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	myprofile_activity.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: int getCheckedRadioButtonId()>	app:['radio', 'radio']	app['radio', 'radio']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.media.MediaRecorder: void <init>()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioSource(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	net_statistics_activity.xml:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setMaxDuration(int)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	net_statistics_activity.xml:['medium', 'recorder', 'file']	app['medium', 'recorder', 'file']	ui-unmatch
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: void <init>()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void start()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaRecorder: void stop()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	net_statistics_activity.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	net_statistics_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void stop()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	net_statistics_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	net_statistics_activity.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	net_statistics_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	net_statistics_activity.xml:['sms']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	net_statistics_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	net_statistics_activity.xml:['store']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	net_statistics_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	net_statistics_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	net_statistics_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	net_statistics_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	net_statistics_activity.xml:['file']	app['file']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	myprofile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	myprofile_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	phone_invite_activity.xml:['sms']	app[]	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	profile_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.addextras.account: void <init>()>	profile_activity.xml:['account']	app['account']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_fate_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_fate_activity.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_fate_activity.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_fate_activity.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.GregorianCalendar: void <init>()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	chat_activity.xml:['calendar']	app[]	ui-unmatch
<android.addextras.account: void <init>()>	login_activity.xml:['account']	app['account']	ui-unmatch
--------------------------------
