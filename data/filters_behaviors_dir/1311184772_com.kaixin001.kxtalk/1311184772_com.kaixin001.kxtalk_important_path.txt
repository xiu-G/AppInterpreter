----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.util.TimerTask: void <init>()>    	['timer']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.lang.StackTraceElement: java.lang.String getFileName()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>    	['clipboard']
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<java.util.TimerTask: boolean cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>    	['sensor']
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
<android.addextras.contacts_people: void <init>()>    	['contact']
<android.addextras.com.android.contacts: void <init>()>    	['contact']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: boolean cancel()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.addextras.phone_contacts: void <init>()>    	['phone', 'contact']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaRecorder: int getMaxAmplitude()>    	['medium', 'recorder']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.lang.String toString()>    	['url']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.Proxy: java.lang.String getDefaultHost()>    	['host']
<android.net.Proxy: int getDefaultPort()>    	['port']
<android.net.Proxy: java.lang.String getHost(android.content.Context)>    	['host']
<android.net.Proxy: int getPort(android.content.Context)>    	['port']
<android.addextras.telephony_carriers_preferapn: void <init>()>    	['telephony']
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>    	['address']
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
----------------------------
----------------------------
<android.addextras.phone_use_kk: void <init>()>    	['phone']
<android.addextras.phone_unuse_kk: void <init>()>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>    	['alarm']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.addextras.latitude: void <init>()>    	['latitude']
<android.addextras.longitude: void <init>()>    	['longitude']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.NetworkInfo: int getType()>    	['network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
<android.net.Proxy: java.lang.String getDefaultHost()>    	['host']
<android.net.Proxy: java.lang.String getHost(android.content.Context)>    	['host']
<android.addextras.noConnectivity: void <init>()>    	['connectivity']
<android.addextras.networkInfo: void <init>()>    	['network']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
<android.net.Proxy: java.lang.String getDefaultHost()>    	['host']
<android.net.Proxy: int getDefaultPort()>    	['port']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>    	['alarm']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.addextras.URL_ARRAY: void <init>()>    	['url']
<android.addextras.CURR_URL: void <init>()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: long length()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: java.lang.String getHeaderFieldKey(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getRingerMode()>    	['audio']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
----------------------------
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>    	['sensor']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
<java.net.Socket: boolean isConnected()>    	['connect']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
<java.net.Socket: boolean isConnected()>    	['connect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>    	['sensor']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void <init>()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<java.net.Socket: boolean isConnected()>    	['connect']
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>    	['address']
<java.net.Socket: void connect(java.net.SocketAddress,int)>    	['connect']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>    	['address']
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>    	['address']
<java.net.Socket: void connect(java.net.SocketAddress,int)>    	['connect']
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
<android.widget.RadioGroup: int getCheckedRadioButtonId()>    	['radio', 'radio']
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.media.MediaRecorder: void <init>()>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioSource(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setOutputFormat(int)>    	['medium', 'recorder']
<android.media.MediaRecorder: void setAudioEncoder(int)>    	['medium', 'recorder', 'audio']
<android.media.MediaRecorder: void setMaxDuration(int)>    	['medium', 'recorder']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>    	['medium', 'recorder', 'file']
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>    	['medium', 'recorder']
<android.media.MediaRecorder: void prepare()>    	['medium', 'recorder']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.media.MediaRecorder: void start()>    	['medium', 'recorder']
<java.util.TimerTask: boolean cancel()>    	['timer']
<android.media.MediaRecorder: void stop()>    	['medium', 'recorder']
<android.media.MediaRecorder: void release()>    	['medium', 'recorder']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.util.Timer: void cancel()>    	['timer']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void cancel()>    	['timer']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.addextras.account: void <init>()>    	['account']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.GregorianCalendar: void <init>()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.addextras.account: void <init>()>    	['account']
----------------------------
----------------------------
