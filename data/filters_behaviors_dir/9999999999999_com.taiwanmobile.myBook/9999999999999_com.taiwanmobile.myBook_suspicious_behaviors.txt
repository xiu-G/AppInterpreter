<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long length()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void readFully(byte[])>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	iii_reader.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void set(int,int)>	iii_reader.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	iii_reader.xml:['calendar']	app[]	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void readFully(byte[])>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[])>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>	iii_reader.xml:['store']	app[]	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	iii_reader.xml:['store']	app[]	ui-unmatch
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>	iii_reader.xml:['store']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	iii_reader.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: long length()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	iii_reader.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	iii_reader.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	iii_reader.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	iii_reader.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	iii_reader.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	iii_reader.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_reader.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_search_book.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_search_book.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_search_book.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_search_book.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_search_book.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_search_book.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_reader_catalog_jump.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_reader_catalog_jump.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader_catalog_jump.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_reader_catalog_jump.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader_catalog_jump.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_reader_catalog_jump.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	iii_main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	iii_reader.xml:['file', 'directory']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_reader.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	iii_reader.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	iii_reader.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	iii_reader.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_online_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_online_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_online_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_online_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_online_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	iii_online_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	iii_online_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	iii_online_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_online_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_online_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_online_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_online_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	iii_online_main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_wv.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	iii_main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	iii_main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	iii_main.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	iii_reader.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	iii_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	iii_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	iii_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	iii_main.xml:['address']	app['address']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	iii_main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	iii_main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	iii_main.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: int getNetworkType()>	iii_main.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	iii_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	iii_main.xml:['address']	app['address']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	iii_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	iii_main.xml:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	iii_main.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	iii_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	iii_main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	iii_main.xml:['stat']	app['stat']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iii_main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	iii_main.xml:['url']	app['url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	splashscreen.xml:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	splashscreen.xml:['access', 'file']	app['access', 'file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	splashscreen.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	splashscreen.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splashscreen.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splashscreen.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	splashscreen.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	splashscreen.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	splashscreen.xml:['file']	app['file']	ui-unmatch
<android.media.AudioTrack: void play()>	mereader.xml:['audio', 'play']	app['audio', 'play']	ui-unmatch
<android.media.AudioTrack: void pause()>	mereader.xml:['audio', 'pause']	app['audio', 'pause']	ui-unmatch
<android.media.MediaRecorder: void stop()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void reset()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	mereader.xml:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	mereader.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	mereader.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	iii_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	iii_reader.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	iii_reader.xml:['file']	app['file']	ui-unmatch
--------------------------------
