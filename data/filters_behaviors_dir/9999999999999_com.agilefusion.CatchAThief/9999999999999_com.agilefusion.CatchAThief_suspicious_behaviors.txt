<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>	main.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	main.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	main.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	main.xml:['submit']	app['submit']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	main.xml:['clock']	app[]	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	main.xml:['submit']	app['submit']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	app:['player', 'audio']	app['player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setVolume(float,float)>	app:['player', 'volume']	app['player', 'volume']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['player']	app['player']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.SoundPool: void release()>	app:['sound']	app['sound']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:['network']	app['network']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.os.SystemClock: long currentThreadTimeMillis()>	main.xml:['clock']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
