----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.os.CountDownTimer: void cancel()>    	['timer']
<android.os.CountDownTimer: void <init>(long,long)>    	['timer']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.os.CountDownTimer: void cancel()>    	['timer']
<android.os.CountDownTimer: void <init>(long,long)>    	['timer']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.os.CountDownTimer: void cancel()>    	['timer']
<android.os.CountDownTimer: void <init>(long,long)>    	['timer']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.os.CountDownTimer: void cancel()>    	['timer']
<android.os.CountDownTimer: void <init>(long,long)>    	['timer']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.os.CountDownTimer: void cancel()>    	['timer']
<android.os.CountDownTimer: void <init>(long,long)>    	['timer']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setVolume(float,float)>    	['medium', 'player', 'volume']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.media.SoundPool: void release()>    	['sound']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.os.CountDownTimer: void cancel()>    	['timer']
<android.os.CountDownTimer: void <init>(long,long)>    	['timer']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long currentThreadTimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
