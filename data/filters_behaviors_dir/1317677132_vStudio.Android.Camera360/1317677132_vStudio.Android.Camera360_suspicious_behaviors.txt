<java.io.File: boolean equals(java.lang.Object)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	tx_webview.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	tx_webview.xml:['url']	app['url']	ui-unmatch
<android.addextras.url: void <init>()>	tx_webview.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
--------------------------------
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	pic_save_path_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	pic_save_path_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	pic_save_path_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	pic_save_path_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	pic_save_path_main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>	app:['directory']	app['directory']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	share_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	pic_save_path_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:[]	app[]
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	app:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	app:['telephony']	app['telephony']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>	app:['password']	app['password']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	share_main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: int getCheckedRadioButtonId()>	share_main.xml:['radio', 'radio']	app['radio', 'radio']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:[]	app[]
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getQuery()>	app:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getRef()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: boolean cancel()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app_start.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app_buy.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app_start.xml:['alarm']	app['alarm']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app_start.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app_start.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	scene_manager.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	app:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getNetworkType()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	app:['telephony', 'phone']	app['telephony', 'phone']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	app:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>	app:['telephony', 'voice']	app['telephony', 'voice']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	pic_save_path_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	pic_save_path_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getRootDirectory()>	pic_save_path_main.xml:['directory']	app['directory']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: java.lang.String toString()>	app_start.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getProtocol()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getHost()>	app:['url', 'host']	app['url', 'host']	ui-unmatch
<java.net.URL: int getPort()>	app:['url', 'port']	app['url', 'port']	ui-unmatch
<java.net.URL: java.lang.String getPath()>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String getLocalizedMessage()>	app:['url']	app['url']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app_start.xml:['pause']	app['pause']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void release()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app_start.xml:['location']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: int hashCode()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restoreToCount(int)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Sensor: int getType()>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	share_main.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	share_main.xml:['radio']	app['radio']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.security.KeyStore: java.lang.String getDefaultType()>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>	share_main.xml:['store']	app['store']	ui-unmatch
<java.security.KeyStore: void load(java.io.InputStream,char[])>	share_main.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.location.Location: void setProvider(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	share_main.xml:['location']	app[]	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	share_main.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	share_main.xml:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void startPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	share_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>	app_start.xml:['medium', 'file']	app['medium', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app_start.xml:['audio']	app['audio']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app_start.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.widget.TabHost: void setup()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	app_start.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setBackgroundResource(int)>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app_start.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	app_start.xml:['host']	app['host']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app_start.xml:['access']	app['access']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app_start.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>	app_start.xml:['sensor']	app['sensor']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: long getTime()>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app_start.xml:['location']	app[]	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	app_start.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app_start.xml:['location', 'location']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTag(java.lang.Object)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: int getChildCount()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: android.view.View getChildAt(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String flatten()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.addextras._GPhoto_Service_Action: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	share_main.xml:['shadow']	app['shadow']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.location.Location: double getLatitude()>	share_main.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	share_main.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>	app_start.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.addextras.list_photosize: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.addextras.mSetting_list_photosize_Index: void <init>()>	app_start.xml:['photo']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	newgrid.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	newgrid.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	newgrid.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	newgrid.xml:['network']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	newgrid.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	newgrid.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	newgrid.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	newgrid.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	newgrid.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	newgrid.xml:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	newgrid.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	app_start.xml:['camera', 'picture']	app['picture']	ui-unmatch
<android.hardware.Camera: void stopPreview()>	app_start.xml:['camera']	app[]	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	bug_tracker.xml:['memory']	app['memory']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String flatten()>	bug_tracker.xml:[]	app[]
<android.hardware.Camera: void release()>	bug_tracker.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app_start.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	app_start.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app_start.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_start.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app_start.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app_start.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app_start.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app_start.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app_start.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app_start.xml:['calendar']	app['calendar']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<android.widget.RadioGroup: void clearCheck()>	app_start.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	scene_manager.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app_start.xml:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app_start.xml:['camera']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	share_main.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	share_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	share_main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	share_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	share_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	share_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	share_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getParent()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	share_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	share_main.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	share_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	share_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	share_main.xml:['network']	app[]	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	share_main.xml:['network']	app[]	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	share_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	share_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	share_main.xml:['location']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	bug_tracker.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.Object getContent()>	bug_tracker.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	bug_tracker.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	bug_tracker.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	bug_tracker.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	scene_manager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	scene_manager.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	scene_manager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:[]	app[]
--------------------------------
<android.widget.TabHost: void setup()>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app_buy.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app_buy.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app_buy.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app_buy.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: java.lang.String getProvider()>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: long getTime()>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
