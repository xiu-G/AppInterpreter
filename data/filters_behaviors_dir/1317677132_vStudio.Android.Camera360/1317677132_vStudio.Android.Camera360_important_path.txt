----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean equals(java.lang.Object)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.addextras.url: void <init>()>    	['url']
----------------------------
----------------------------
<java.io.File: boolean isDirectory()>    	['file', 'directory']
----------------------------
----------------------------
----------------------------
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>    	['directory']
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>    	['address']
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>    	['telephony', 'network', 'country']
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>    	['telephony']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>    	['alarm']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>    	['password']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<android.widget.RadioGroup: int getCheckedRadioButtonId()>    	['radio', 'radio']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>    	['alarm']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
----------------------------
----------------------------
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.lang.String getQuery()>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>    	['url']
<java.net.URL: java.lang.String getRef()>    	['url']
----------------------------
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: boolean cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void release()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: long length()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>    	['file', 'file']
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>    	['alarm']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
----------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
----------------------------
----------------------------
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void startPreview()>    	['camera']
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>    	['telephony', 'network', 'country']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>    	['telephony', 'network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.telephony.TelephonyManager: int getNetworkType()>    	['telephony', 'network']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>    	['telephony']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>    	['telephony', 'voice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getRootDirectory()>    	['directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: java.lang.String toString()>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>    	['url']
<java.net.URL: java.lang.String getProtocol()>    	['url']
<java.net.URL: java.lang.String getHost()>    	['url', 'host']
<java.net.URL: int getPort()>    	['url', 'port']
<java.net.URL: java.lang.String getPath()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String getLocalizedMessage()>    	['url']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>    	['sensor']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
----------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>    	['sensor']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: int hashCode()>    	['file']
----------------------------
<android.graphics.Canvas: void restoreToCount(int)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
----------------------------
----------------------------
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Sensor: int getType()>    	['sensor']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>    	['sms']
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.security.KeyStore: java.lang.String getDefaultType()>    	['store']
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>    	['store']
<java.security.KeyStore: void load(java.io.InputStream,char[])>    	['store']
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: void setProvider(java.lang.String)>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
<android.hardware.Camera: void startPreview()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.addextras.android.intent.action.MEDIA_SCANNER_SCAN_FILE: void <init>()>    	['medium', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean canRead()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.widget.TabHost: void setup()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setBackgroundResource(int)>    	['host']
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>    	['host']
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>    	['sensor']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTag(java.lang.Object)>    	['radio']
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>    	['radio']
<android.widget.RadioGroup: int getChildCount()>    	['radio']
<android.widget.RadioGroup: android.view.View getChildAt(int)>    	['radio']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.addextras._GPhoto_Service_Action: void <init>()>    	['photo']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>    	['camera']
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.widget.RadioGroup: void check(int)>    	['radio']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioButton: boolean isChecked()>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<android.addextras.com.android.launcher.action.INSTALL_SHORTCUT: void <init>()>    	['shortcut']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.addextras.list_photosize: void <init>()>    	['photo']
<android.addextras.mSetting_list_photosize_Index: void <init>()>    	['photo']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String flatten()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.widget.RadioGroup: void clearCheck()>    	['radio']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.NetworkInfo: java.lang.String getSubtypeName()>    	['network']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.lang.Object getContent()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: java.util.TimeZone getTimeZone()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
----------------------------
<android.widget.TabHost: void setup()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: long getTime()>    	['location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
