<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	tab_layout.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	search_layout.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	search_layout.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	search_layout.xml:['url']	app['url']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	search_layout.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	search_layout.xml:['host', 'indicator']	app['host']	ui-unmatch
--------------------------------
<android.widget.TabHost: void <init>(android.content.Context)>	app:['host']	app['host']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	user_profile_tabs_resize.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	user_profile_tabs_resize.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	user_profile_tabs_resize.xml:['host', 'indicator']	app['host']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	list_w_tabs_layout.xml:['account']	app[]	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	list_w_tabs_layout.xml:['account']	app[]	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	list_w_tabs_layout.xml:['account', 'account']	app[]	ui-unmatch
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>	list_w_tabs_layout.xml:['account']	app[]	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:[]	app[]
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>	app:['password']	app['password']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.TabHost: int getCurrentTab()>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app:[]	app[]
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:[]	app[]
<android.location.Location: long getTime()>	app:[]	app[]
<android.location.Location: float getAccuracy()>	app:[]	app[]
<android.location.Location: java.lang.String getProvider()>	app:[]	app[]
<android.location.Location: long getTime()>	app:[]	app[]
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:[]	app[]
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int readInt()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	app:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: byte readByte()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: byte readByte()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	app:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void writeInt(int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long getFilePointer()>	app:['access', 'file', 'file']	app['access', 'file', 'file']	ui-unmatch
<java.io.RandomAccessFile: int skipBytes(int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: int readInt()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	app:[]	app[]
<android.location.Address: java.lang.String getLocality()>	app:[]	app[]
<android.location.Address: java.lang.String getAdminArea()>	app:[]	app[]
<android.location.Address: java.lang.String getCountryCode()>	app:['country']	app['country']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: java.lang.String getProvider()>	app:[]	app[]
--------------------------------
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	search_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	search_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void setAccuracy(float)>	app:[]	app[]
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:[]	app[]
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	app:[]	app[]
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>	app:[]	app[]
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.ImageView: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<com.android.internal.http.multipart.FilePartSource: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileNotFoundException: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource)>	app:['file']	app['file']	ui-unmatch
<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.ListView: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
<android.widget.AbsListView: void clearChoices()>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	contribute_layout.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	contribute_layout.xml:['location', 'longitude']	app['longitude']	ui-unmatch
--------------------------------
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>	login_layout.xml:[]	app[]
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>	login_layout.xml:[]	app[]
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>	login_layout.xml:[]	app[]
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>	login_layout.xml:['password']	app['password']	ui-unmatch
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>	login_layout.xml:[]	app[]
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>	login_layout.xml:['password']	app['password']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: boolean delete()>	wait.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:[]	app[]
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>	app:['password']	app['password']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>	app:[]	app[]
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	collection_place_choose.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	collection_place_choose.xml:['file']	app['file']	ui-unmatch
<android.location.Location: double getLatitude()>	collection_place_choose.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	collection_place_choose.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	collection_place_choose.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	collection_place_choose.xml:['location', 'longitude']	app['longitude']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo$State: boolean equals(java.lang.Object)>	app:[]	app[]
--------------------------------
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
--------------------------------
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	activity_layout.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	activity_layout.xml:['host', 'indicator']	app['host']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	tab_content.xml:['location']	app[]	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	tab_content.xml:['host', 'indicator']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	contribute_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>	review_layout.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	review_layout.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	review_layout.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	review_layout.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	review_layout.xml:['host', 'indicator']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	review_layout.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:[]	app[]
--------------------------------
<java.io.FileInputStream: void <init>(java.io.File)>	view_user_profile_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	view_user_profile_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>	view_user_profile_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	view_user_profile_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.RelativeLayout: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	list_layout.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void reset()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.http.AndroidHttpClient: void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)>	app:['http']	app['http']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:[]	app[]
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	app:[]	app[]
<android.accounts.AccountManagerFuture: java.lang.Object getResult()>	app:[]	app[]
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>	app:['http']	app['http']	ui-unmatch
<android.net.http.AndroidHttpClient: java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity)>	app:['http']	app['http']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	user_profile_tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	user_profile_tabs.xml:['host', 'indicator']	app['host']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void pause()>	app:['medium', 'player', 'pause']	app['medium', 'player', 'pause']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)>	app:['medium', 'store', 'medium']	app['medium', 'store', 'medium']	ui-unmatch
--------------------------------
<android.widget.AbsListView: int getChoiceMode()>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<com.android.internal.http.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>	app:['file']	app['file']	ui-unmatch
<com.android.internal.http.multipart.FilePartSource: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileNotFoundException: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource)>	app:['file']	app['file']	ui-unmatch
<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	tab_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int,int)>	tab_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	tab_layout.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	user_profile_tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	user_profile_tabs.xml:['host', 'indicator']	app['host']	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	view_kullection_layout.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>	app:['http']	app['http']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	collection_place_choose.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	collection_place_choose.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void setAccuracy(float)>	app:[]	app[]
--------------------------------
<android.app.Activity: void onPause()>	popup.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	user_profile_tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	user_profile_tabs.xml:['host', 'indicator']	app['host']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	login_layout.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	app:[]	app[]
<android.location.Address: java.lang.String getAddressLine(int)>	app:[]	app[]
<android.location.Address: java.lang.String getLocality()>	app:[]	app[]
<android.location.Address: java.lang.String getAdminArea()>	app:[]	app[]
<android.location.Address: java.lang.String getCountryCode()>	app:['country']	app['country']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	app:[]	app[]
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	tab_layout.xml:['storage']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	collection_place_choose.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	collection_place_choose.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	collection_place_choose.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	collection_place_choose.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	collection_place_choose.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	collection_place_choose.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	view_kullection_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet)>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.location.Location: long getTime()>	app:[]	app[]
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:[]	app[]
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.view.MotionEvent: int getDeviceId()>	app:['device']	app['device']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
