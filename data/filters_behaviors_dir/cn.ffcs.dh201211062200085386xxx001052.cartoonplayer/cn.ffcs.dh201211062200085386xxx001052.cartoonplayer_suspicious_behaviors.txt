<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_recommendation_listview.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamMute(int,boolean)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_exist.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.accounts.NetworkErrorException: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: long length()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<android.accounts.NetworkErrorException: void <init>(java.lang.String)>	app:[]	app[]
--------------------------------
<android.telephony.PhoneStateListener: void <init>()>	activity_cartoon_player_main.xml:['phone']	app['phone']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamMute(int,boolean)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_aboutus.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.view.MotionEvent: void setLocation(float,float)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<java.io.RandomAccessFile: void write(byte[],int,int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_custom_dialog_one.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_login.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_discussion_group.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: long lastModified()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.ActivityManager: int getMemoryClass()>	app:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: boolean isExternalStorageRemovable()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean canWrite()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long getUsableSpace()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_custom_dialog_two.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_webshow.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean canRead()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_carousel_browse.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_custom_dialog_three.xml:['pause']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
--------------------------------
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_setting.xml:['pause']	app[]	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
<android.view.ViewGroup: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	activity_download_tab.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	app:['memory']	app['memory']	ui-unmatch
<java.io.File: boolean canWrite()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoWidth()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getVideoHeight()>	activity_cartoon_player_main.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_cartoon_player_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	activity_cartoon_player_main.xml:['address']	app['address']	ui-unmatch
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: int getLocalPort()>	activity_cartoon_player_main.xml:['server', 'port']	app['server', 'port']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.net.ServerSocket: java.net.Socket accept()>	activity_cartoon_player_main.xml:['server']	app['server']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress)>	activity_cartoon_player_main.xml:['connect']	app['connect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_cartoon_player_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_cartoon_player_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_cartoon_player_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_cartoon_player_main.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void pause()>	activity_cartoon_player_main.xml:['medium', 'player', 'pause']	app['medium', 'player']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:[]	app[]
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_cartoon_player_main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.com.ffcs.offprint.download: void <init>()>	app:[]	app[]
<android.addextras.url_list: void <init>()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getCanonicalFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	activity_main.xml:[]	app[]
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['connect']	app['connect']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	activity_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	activity_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	activity_main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	activity_main.xml:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamMute(int,boolean)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restoreToCount(int)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>	activity_cartoon_player_main.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_carousel_browse.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.addextras.URL: void <init>()>	activity_carousel_browse.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	activity_cartoon_player_main.xml:['telephony']	app['telephony']	ui-unmatch
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	activity_cartoon_player_main.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_cartoon_player_main.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	activity_cartoon_player_main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	activity_watch_view.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	activity_watch_view.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.addextras.url: void <init>()>	activity_watch_view.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_offline_tip.xml:['pause']	app[]	ui-unmatch
--------------------------------
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamMute(int,boolean)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_readcomic_viewpager.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_webshow.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_readcomic_listview.xml:['pause']	app[]	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
