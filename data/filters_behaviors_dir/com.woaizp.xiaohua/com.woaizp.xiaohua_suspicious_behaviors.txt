<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	wysc.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	wysc.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	wysc.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	wysc.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	wysc.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	wysc.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	wysc.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	wysc.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	wysc.xml:['telephony']	app['telephony']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	wysc.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	wysc.xml:['network']	app['network']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.Object getContent()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.TimeZone getTimeZone()>	app:['calendar']	app['calendar']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	app:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	app:['file', 'access']	app['file', 'access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>	app:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	app:['storage']	app['storage']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	app:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	app:['network']	app['network']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	app:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	app:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	app:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	app:['medium', 'player', 'video']	app['medium', 'player', 'video']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	app:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)>	app:['url', 'url']	app['url', 'url']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.util.jar.JarFile: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	app:['file']	app['file']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	app:['download']	app['download']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	app:['telephony', 'phone']	app['telephony', 'phone']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	app:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	app:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	app:['location']	app['location']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<java.util.Locale: java.lang.String getDisplayLanguage()>	app:['language']	app['language']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>	app:['network', 'network']	app['network', 'network']	ui-unmatch
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>	app:['network', 'address']	app['network', 'address']	ui-unmatch
<java.net.InetAddress: boolean isLoopbackAddress()>	app:['address', 'address']	app['address', 'address']	ui-unmatch
<java.net.InetAddress: java.lang.String getHostAddress()>	app:['address', 'host', 'address']	app['address', 'host', 'address']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>	app:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getAltitude()>	app:['location']	app['location']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: boolean canWrite()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	app:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>	app:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>	app:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>	app:['location', 'network']	app['location', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	app:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	app:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	app:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	app:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	app:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	app:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.NetworkInfo: boolean isRoaming()>	app:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	app:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getSubtype()>	app:['network']	app['network']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:['location']	app['location']	ui-unmatch
<android.location.Location: long getTime()>	app:['location']	app['location']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	app:['location']	app['location']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:['location', 'location']	app['location', 'location']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setDoOutput(boolean)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.util.Map getHeaderFields()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	playchapters.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
