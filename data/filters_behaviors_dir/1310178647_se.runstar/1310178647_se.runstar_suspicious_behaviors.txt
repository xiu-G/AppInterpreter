<java.util.Locale: java.lang.String getLanguage()>	main.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	goals.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	goals.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int getActualMaximum(int)>	goals.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void set(int,int)>	goals.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	goals.xml:['calendar']	app[]	ui-unmatch
<java.util.Date: int getMonth()>	goals.xml:['month']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	settings.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	run_sprintsong.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	facebook.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	facebook.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	account.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Date: void setHours(int)>	run_setup.xml:['hour']	app['hour']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>	run_setup.xml:['medium', 'store', 'audio', 'medium']	app['medium', 'audio', 'medium']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	run_setup.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	run_setup.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>	run_setup.xml:['medium', 'store', 'audio']	app['medium', 'audio']	ui-unmatch
--------------------------------
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	app:['location']	app['location']	ui-unmatch
<android.location.Location: double convert(java.lang.String)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void pause()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: void check(int)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void <init>(java.io.File,int)>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void close()>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	main.xml:['calendar']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	main.xml:['calendar']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	results.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	results.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void set(int,int)>	results.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	results.xml:['calendar']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
<android.graphics.Paint: void clearShadowLayer()>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:[]	app[]
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.location.Location: float getAccuracy()>	app:['location']	app['location']	ui-unmatch
<android.location.Location: float distanceTo(android.location.Location)>	app:['location']	app['location']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getAltitude()>	app:['location']	app['location']	ui-unmatch
<android.location.Location: float getSpeed()>	app:['location', 'speed']	app['location', 'speed']	ui-unmatch
<android.location.Location: long getTime()>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	results.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
<android.graphics.Paint: void clearShadowLayer()>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>	app:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:['location', 'location']	app['location', 'location']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	goals_add_count_view.xml:['pause']	app[]	ui-unmatch
--------------------------------
<android.location.Location: java.lang.String convert(double,int)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
<java.util.Date: void setHours(int)>	edit_double.xml:['hour']	app['hour']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	settings.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	settings.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	settings.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	settings.xml:['file']	app['file']	ui-unmatch
--------------------------------
