<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	tabcontainer.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.ActivityGroup: void onRestoreInstanceState(android.os.Bundle)>	new_claim_view.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	settings_view.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	settings_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	settings_view.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	settings_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	settings_view.xml:['file']	app[]	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	settings_view.xml:['file']	app[]	ui-unmatch
<java.io.FileWriter: void close()>	settings_view.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	settings_view.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	new_claim_prompted_step1_view.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.TabActivity: android.widget.TabHost getTabHost()>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	tabcontainer.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.app.TabActivity: android.widget.TabHost getTabHost()>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	tabcontainer.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>	tabcontainer.xml:['host']	app['host']	ui-unmatch
<java.util.Timer: void <init>(java.lang.String)>	tabcontainer.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	tabcontainer.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	datepicker.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	datepicker.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	login_view.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	new_claim_prompted_step2_view.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	new_claim_prompted_step3_view.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	new_claim_prompted_step3_view.xml:['file']	app[]	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	new_claim_prompted_step3_view.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	claims_view.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	claims_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	claims_view.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	claims_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	claims_view.xml:['file']	app[]	ui-unmatch
<java.io.FileReader: void <init>(java.io.File)>	claims_view.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	claims_view.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	claims_view.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	claims_view.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	claims_view.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	claims_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step5_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.media.MediaRecorder: void stop()>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void release()>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
--------------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	utilities_view.xml:[]	app[]
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	utilities_view.xml:[]	app[]
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	utilities_view.xml:[]	app[]
<android.location.Location: double getLatitude()>	utilities_view.xml:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	utilities_view.xml:['longitude']	app['longitude']	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	utilities_view.xml:[]	app[]
<android.location.Address: java.lang.String getLocality()>	utilities_view.xml:['address']	app[]	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>	utilities_view.xml:[]	app[]
<android.location.Address: java.lang.String getFeatureName()>	utilities_view.xml:['address']	app[]	ui-unmatch
<android.location.Address: double getLatitude()>	utilities_view.xml:['address', 'latitude']	app['latitude']	ui-unmatch
<android.location.Address: double getLongitude()>	utilities_view.xml:['address', 'longitude']	app['longitude']	ui-unmatch
<android.addextras.android.intent.action.CALL: void <init>()>	app:[]	app[]
--------------------------------
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step1_view.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step5_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.media.MediaRecorder: void <init>()>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.io.File getParentFile()>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<android.media.MediaRecorder: void setAudioSource(int)>	app:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFormat(int)>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void setAudioEncoder(int)>	app:['medium', 'recorder', 'audio']	app['medium', 'recorder', 'audio']	ui-unmatch
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void prepare()>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
<android.media.MediaRecorder: void start()>	app:['medium', 'recorder']	app['medium', 'recorder']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	new_claim_prompted_step3_view.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step2_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	login_view.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	login_view.xml:['network', 'connect', 'connect']	app['network', 'connect', 'connect']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	quick_quote_view.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.File: boolean createNewFile()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	utilities_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	new_claim_prompted_step2_view.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	new_claim_prompted_step2_view.xml:['file', 'directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String[] list()>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step5_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step1_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	new_claim_prompted_step2_view.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.File: long length()>	app:[]	app[]
<java.io.FileInputStream: void <init>(java.io.File)>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileNotFoundException: void printStackTrace()>	app:[]	app[]
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	surface_camera.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	new_claim_prompted_step5_view.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	policies_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step5_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.FileInputStream: void <init>(java.io.File)>	app:[]	app[]
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[],int,int)>	app:[]	app[]
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileInputStream: void close()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	new_claim_prompted_step6_view.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	new_claim_prompted_step6_view.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	new_claim_prompted_step6_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	new_claim_prompted_step6_view.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	new_claim_prompted_step6_view.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	new_claim_prompted_step6_view.xml:['file', 'directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String[] list()>	new_claim_prompted_step6_view.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	new_claim_prompted_step6_view.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	new_claim_prompted_step6_view.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step3_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:[]	app[]
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	app:[]	app[]
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	new_claim_prompted_step6_view.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	camera_preview.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	camera_preview.xml:['file']	app[]	ui-unmatch
--------------------------------
