<android.media.MediaPlayer: void stop()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	building.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	building.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	building.xml:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void reset()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	download.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	building.xml:[]	app[]
<android.media.MediaPlayer: boolean isPlaying()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	building.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	building.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	building.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	building.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	audio_guide.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	audio_guide.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	audio_guide.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: boolean mkdirs()>	audio_guide.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	audio_guide.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	audio_guide.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	audio_guide.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	audio_guide.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	audio_guide.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	building.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void pause()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:[]	app[]
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
