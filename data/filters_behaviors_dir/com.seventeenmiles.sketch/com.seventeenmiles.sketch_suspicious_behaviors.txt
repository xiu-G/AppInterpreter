<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<android.content.Context: boolean deleteFile(java.lang.String)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	privacypolicy.xml:['file']	app['file']	ui-unmatch
<android.content.Context: boolean deleteFile(java.lang.String)>	privacypolicy.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	cloud_image_selector.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	cloud_image_selector.xml:['network']	app[]	ui-unmatch
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>	cloud_image_selector.xml:['rate']	app['rate']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	cloud_image_selector.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	cloud_search_list.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.io.File: boolean delete()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	uploadmanager_activity.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	share_dialog.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	share_dialog.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	share_dialog.xml:['file', 'directory']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	share_dialog.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	share_dialog.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	share_dialog.xml:['file', 'file']	app['file', 'file']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	fb_friend_activity.xml:['country']	app['country']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	fb_friend_activity.xml:['script']	app['script']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	fb_friend_activity.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	fb_friend_activity.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	fb_friend_activity.xml:['network', 'connect']	app['connect']	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	fb_friend_activity.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	fb_friend_activity.xml:['memory']	app['memory']	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	fb_friend_activity.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	fb_friend_activity.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	fb_friend_activity.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	fb_friend_activity.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	fb_friend_activity.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	fb_friend_activity.xml:['sensor']	app['sensor']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	fb_friend_activity.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>	app:['submit']	app['submit']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>	app:['submit']	app['submit']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	sketch_edit.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	sketch_edit.xml:['restore']	app['restore']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canWrite()>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean canWrite()>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean canWrite()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.graphics.LightingColorFilter: void <init>(int,int)>	app:['light']	app['light']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	fb_friend_activity.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	fb_friend_activity.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	fb_friend_activity.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	fb_friend_activity.xml:['memory']	app['memory']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	fb_friend_activity.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	fb_friend_activity.xml:['network', 'connect', 'connect']	app['connect', 'connect']	ui-unmatch
--------------------------------
<java.lang.SecurityManager: void checkPermission(java.security.Permission)>	app:['permission']	app['permission']	ui-unmatch
<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>	app:['access']	app['access']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setSavePassword(boolean)>	more.xml:['password']	app['password']	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	more.xml:['form']	app['form']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	more.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	more.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onLowMemory()>	uploadmanager_activity.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	activity_main.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	activity_main.xml:['country']	app['country']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	activity_main.xml:[]	app[]
<java.util.Calendar: void setTimeInMillis(long)>	activity_main.xml:[]	app[]
<java.util.Calendar: int get(int)>	activity_main.xml:[]	app[]
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	twitter_authentication.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void clearFormData()>	twitter_authentication.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: int getType()>	app:[]	app[]
--------------------------------
<java.util.Timer: void <init>()>	cropimage.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	cropimage.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	cropimage.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	cropimage.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	cloud_flickr_list.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	cloudlib_white_blank.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	cloudlib_white_blank.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.net.URL getURL()>	cloudlib_white_blank.xml:['http', 'url', 'url']	app['http', 'url', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	cloudlib_white_blank.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.ParcelFileDescriptor: long getStatSize()>	cloudlib_white_blank.xml:['file', 'stat']	app['file', 'stat']	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.net.URL: java.lang.String getPath()>	cloudlib_white_blank.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean setLastModified(long)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	cloudlib_white_blank.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	cloudlib_white_blank.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	cloudlib_white_blank.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	sketch_edit.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	sketch_edit.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	sketch_edit.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	sketch_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	cloudlib_white_blank.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	cloudlib_white_blank.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	cloudlib_white_blank.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	flickr_authentication.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void clearFormData()>	flickr_authentication.xml:['form']	app['form']	ui-unmatch
--------------------------------
<java.net.HttpURLConnection: void disconnect()>	activity_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	cloud_flickr_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	cloud_flickr_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	cloud_flickr_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	cloud_flickr_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	cloud_flickr_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	cloud_flickr_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void flush()>	cloud_flickr_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	cloud_flickr_list.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>	app:['submit']	app['submit']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.lang.RuntimePermission: void <init>(java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean canWrite()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	cloud_search_list.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cloud_search_list.xml:['file']	app['file']	ui-unmatch
<java.lang.Runtime: long totalMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long freeMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
<java.lang.Runtime: long maxMemory()>	cloud_search_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.app.Activity: void onLowMemory()>	sketch_edit.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
--------------------------------
