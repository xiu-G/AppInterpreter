----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: boolean deleteFile(java.lang.String)>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: boolean deleteFile(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>    	['rate']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: long length()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.os.Environment: java.io.File getDataDirectory()>    	['directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void setConnectTimeout(int)>    	['url', 'connect']
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['url']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: java.lang.String toString()>    	['url']
----------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>    	['submit']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>    	['submit']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileWriter: void <init>(java.io.File,boolean)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileWriter: void <init>(java.io.File)>    	['file']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<java.io.FileWriter: void <init>(java.io.File,boolean)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: boolean canWrite()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean canWrite()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
----------------------------
----------------------------
<java.io.File: java.lang.String getPath()>    	['file']
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean canWrite()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<java.lang.Runtime: long totalMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.LightingColorFilter: void <init>(int,int)>    	['light']
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.lang.Runtime: long maxMemory()>    	['memory']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.SecurityManager: void checkPermission(java.security.Permission)>    	['permission']
<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>    	['access']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onLowMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void clearFormData()>    	['form']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: int getType()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.net.URL getURL()>    	['http', 'url', 'url']
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<android.os.ParcelFileDescriptor: long getStatSize()>    	['file', 'stat']
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>    	['file']
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>    	['file']
<java.net.URL: java.lang.String getPath()>    	['url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: boolean setLastModified(long)>    	['file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void clearFormData()>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>    	['submit']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
<java.lang.RuntimePermission: void <init>(java.lang.String)>    	['permission']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean canWrite()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<java.lang.Runtime: long totalMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: long length()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.lang.Runtime: long totalMemory()>    	['memory']
<java.lang.Runtime: long freeMemory()>    	['memory']
<java.lang.Runtime: long maxMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onLowMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.io.FileInputStream: java.io.FileDescriptor getFD()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
----------------------------
----------------------------
