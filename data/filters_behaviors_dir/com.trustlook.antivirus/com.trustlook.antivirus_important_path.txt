----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: boolean renameTo(java.io.File)>    	['file']
<dalvik.system.DexFile: void <init>(java.lang.String)>    	['file']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.net.URL getURL()>    	['http', 'url', 'url']
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<android.os.ParcelFileDescriptor: long getStatSize()>    	['file', 'stat']
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>    	['file']
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>    	['file']
<java.net.URL: java.lang.String getPath()>    	['url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: boolean setLastModified(long)>    	['file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>    	['device']
----------------------------
<android.app.admin.DeviceAdminReceiver: void <init>()>    	['device']
----------------------------
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)>    	['device', 'password']
----------------------------
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)>    	['device', 'password']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View$DragShadowBuilder: void <init>(android.view.View)>    	['shadow']
----------------------------
----------------------------
----------------------------
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>    	['access', 'file']
<java.io.RandomAccessFile: java.lang.String readLine()>    	['access', 'file']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.Location: void <init>(java.lang.String)>    	['location']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: float getAccuracy()>    	['location']
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>    	['location']
<android.location.Address: int getMaxAddressLineIndex()>    	['address', 'address']
<android.location.Address: java.lang.String getAddressLine(int)>    	['address', 'address']
----------------------------
<android.location.Location: void set(android.location.Location)>    	['location']
<java.util.Timer: void cancel()>    	['timer']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: float getAccuracy()>    	['location']
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>    	['alarm']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.net.URL getURL()>    	['http', 'url', 'url']
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<android.os.ParcelFileDescriptor: long getStatSize()>    	['file', 'stat']
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>    	['file']
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>    	['file']
<java.net.URL: java.lang.String getPath()>    	['url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: boolean setLastModified(long)>    	['file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: boolean deleteFile(java.lang.String)>    	['file']
<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>    	['installer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>(java.lang.String)>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>    	['telephony', 'network', 'country']
<android.telephony.TelephonyManager: int getNetworkType()>    	['telephony', 'network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>    	['telephony', 'network']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: int getType()>    	['network']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>    	['http']
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void release()>    	['camera']
<android.net.Uri: java.lang.String getHost()>    	['host']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<android.net.NetworkInfo: int getType()>    	['network']
<android.net.NetworkInfo: int getSubtype()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>    	['account', 'account']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>    	['device']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>    	['submit']
----------------------------
<android.app.Application: void onLowMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>    	['address']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Locale: java.lang.String getISO3Language()>    	['language']
<java.io.FileNotFoundException: java.lang.String getLocalizedMessage()>    	['file']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>    	['shadow', 'shadow']
----------------------------
----------------------------
----------------------------
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>    	['device']
----------------------------
----------------------------
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>    	['memory']
<android.os.Debug$MemoryInfo: int getTotalPss()>    	['memory']
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.io.File getCanonicalFile()>    	['file', 'file']
<java.io.File: java.io.File getAbsoluteFile()>    	['file', 'file']
<java.io.File: boolean equals(java.lang.Object)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>    	['alarm']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>    	['alarm']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.support.v4.app.FragmentActivity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: long lastModified()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>    	['location', 'location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>    	['device']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.net.URLConnection: int getContentLength()>    	['url']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
----------------------------
----------------------------
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>    	['script']
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript,android.renderscript.Element)>    	['script']
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)>    	['script']
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)>    	['script']
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)>    	['script']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
----------------------------
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>    	['alarm']
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>    	['alarm']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: int getContentLength()>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean canRead()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>    	['file']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>    	['file']
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>    	['file']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void release()>    	['camera']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdir()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View$DragShadowBuilder: android.view.View getView()>    	['shadow']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.FileObserver: void <init>(java.lang.String,int)>    	['file']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ImageView: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
<android.hardware.Camera: void stopPreview()>    	['camera']
----------------------------
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)>    	['device', 'password']
<android.app.admin.DevicePolicyManager: void lockNow()>    	['device']
<android.app.admin.DevicePolicyManager: void wipeData(int)>    	['device']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
----------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.app.ActivityManager: int getMemoryClass()>    	['memory']
<android.app.ActivityManager: int getLargeMemoryClass()>    	['memory']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>    	['memory']
<android.os.Debug$MemoryInfo: int getTotalPss()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)>    	['telephony', 'sms', 'sms']
----------------------------
----------------------------
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)>    	['device', 'password']
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: long lastModified()>    	['file']
----------------------------
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>    	['alarm']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getPath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: long lastModified()>    	['file']
<java.io.File: long length()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>    	['alarm']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioGroup: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void <init>(android.content.Context)>    	['radio']
<android.widget.RadioButton: void setTextColor(int)>    	['radio']
<android.widget.RadioButton: void setText(java.lang.CharSequence)>    	['radio']
<android.widget.RadioButton: void setTextSize(float)>    	['radio']
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>    	['radio']
<android.widget.RadioGroup: void addView(android.view.View)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isAvailable()>    	['network']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
