<android.os.SystemClock: long elapsedRealtime()>	activity_device_main.xml:['clock']	app['clock']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<dalvik.system.DexFile: void <init>(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	activity_device_main.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_device_main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	activity_device_main.xml:['timer']	app['timer']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_device_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_device_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.net.URL getURL()>	activity_device_main.xml:['http', 'url', 'url']	app['url', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	activity_device_main.xml:['http', 'url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<android.os.ParcelFileDescriptor: long getStatSize()>	activity_device_main.xml:['file', 'stat']	app['stat']	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.URL: java.lang.String getPath()>	activity_device_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	activity_device_main.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean setLastModified(long)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	activity_device_main.xml:['http', 'url', 'disconnect']	app['url', 'disconnect']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_device_main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>	activity_device_main.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.view.View$DragShadowBuilder: void <init>(android.view.View)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	activity_main.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.RandomAccessFile: java.lang.String readLine()>	activity_main.xml:['access', 'file']	app['access']	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	activity_main.xml:['memory']	app[]	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	activity_main.xml:['memory']	app[]	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app:[]	app[]
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:[]	app[]
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	app:[]	app[]
<android.location.Address: int getMaxAddressLineIndex()>	app:[]	app[]
<android.location.Address: java.lang.String getAddressLine(int)>	app:[]	app[]
--------------------------------
<android.location.Location: void set(android.location.Location)>	app:[]	app[]
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	app:[]	app[]
<android.location.Location: java.lang.String getProvider()>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:[]	app[]
--------------------------------
<java.util.Timer: void <init>()>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	activity_device_main.xml:['timer']	app['timer']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_device_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_device_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.net.URL getURL()>	activity_device_main.xml:['http', 'url', 'url']	app['url', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	activity_device_main.xml:['http', 'url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<android.os.ParcelFileDescriptor: long getStatSize()>	activity_device_main.xml:['file', 'stat']	app['stat']	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.URL: java.lang.String getPath()>	activity_device_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	activity_device_main.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean setLastModified(long)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_device_main.xml:['http', 'url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_device_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	activity_device_main.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	activity_device_main.xml:['http', 'url', 'disconnect']	app['url', 'disconnect']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	activity_sd_card_scan.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	activity_sd_card_scan.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	activity_sd_card_scan.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	activity_sd_card_scan.xml:['file']	app[]	ui-unmatch
<android.content.Context: boolean deleteFile(java.lang.String)>	activity_sd_card_scan.xml:['file']	app[]	ui-unmatch
<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>	activity_sd_card_scan.xml:['installer']	app['installer']	ui-unmatch
<java.util.Timer: void cancel()>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>(java.lang.String)>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	activity_sd_card_scan.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	activity_advisory.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	activity_advisory.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	activity_advisory.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	activity_advisory.xml:['country']	app['country']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	activity_advisory.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	activity_advisory.xml:['telephony', 'network', 'country']	app['telephony', 'country']	ui-unmatch
<android.telephony.TelephonyManager: int getNetworkType()>	activity_advisory.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	activity_advisory.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	activity_advisory.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	activity_advisory.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	activity_advisory.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	activity_advisory.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	activity_advisory.xml:['call', 'permission']	app['call']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_advisory.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: int getType()>	activity_advisory.xml:['network']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_advisory.xml:['file']	app[]	ui-unmatch
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>	activity_advisory.xml:['http']	app[]	ui-unmatch
<android.net.Uri: java.lang.String getHost()>	activity_advisory.xml:['host']	app['host']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	activity_advisory.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	activity_change_password.xml:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.hardware.Camera: void release()>	app:[]	app[]
<android.net.Uri: java.lang.String getHost()>	app:['host']	app['host']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:[]	app[]
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:[]	app[]
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['connect', 'connect']	app['connect', 'connect']	ui-unmatch
<android.net.NetworkInfo: int getType()>	app:[]	app[]
<android.net.NetworkInfo: int getSubtype()>	app:[]	app[]
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	activity_scream.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	activity_scream.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	activity_scream.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	activity_scream.xml:['medium', 'player', 'play']	app['medium', 'player', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera open()>	activity_scream.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	activity_scream.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	activity_reset_password.xml:['account']	app[]	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	activity_reset_password.xml:['account', 'account']	app[]	ui-unmatch
--------------------------------
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>	activity_device_main.xml:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFilesDir()>	activity_scanapk.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_scanapk.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getISO3Language()>	app:['language']	app['language']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getLocalizedMessage()>	app:[]	app[]
<java.io.FileNotFoundException: java.lang.String getMessage()>	app:[]	app[]
--------------------------------
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>	app:['shadow', 'shadow']	app['shadow', 'shadow']	ui-unmatch
--------------------------------
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>	activity_askfeedback.xml:['device']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	activity_scream.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	dialog_apk_detail.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	dialog_apk_detail.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	dialog_apk_detail.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	dialog_apk_detail.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
--------------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>	activity_device_main.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	activity_apk_manager.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	activity_apk_manager.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	activity_apk_manager.xml:['calendar']	app[]	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	activity_apk_manager.xml:['alarm']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	activity_apk_manager.xml:['calendar']	app[]	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	activity_apk_manager.xml:['alarm']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	activity_apk_manager.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	activity_main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	activity_main.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	activity_main.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.File: long lastModified()>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	activity_main.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_main.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	activity_main.xml:['call', 'permission']	app['call']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	activity_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	activity_main.xml:['network', 'connect']	app['connect']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	activity_main.xml:['submit']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	activity_main.xml:['call', 'permission']	app['call']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	activity_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	activity_main.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>	activity_main.xml:['location', 'location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	activity_main.xml:['location', 'location']	app[]	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	activity_main.xml:['clock']	app['clock']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	activity_main.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	activity_main.xml:['file']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	activity_main.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	activity_main.xml:['country']	app['country']	ui-unmatch
--------------------------------
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>	activity_main.xml:['device']	app[]	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	activity_webpage.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	activity_webpage.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['url', 'disconnect']	app['url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:[]	app[]
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: int getContentLength()>	app:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
--------------------------------
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>	app:['script']	app['script']	ui-unmatch
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript,android.renderscript.Element)>	app:['script']	app['script']	ui-unmatch
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)>	app:['script']	app['script']	ui-unmatch
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)>	app:['script']	app['script']	ui-unmatch
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)>	app:['script']	app['script']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: int getContentLength()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:[]	app[]
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'player', 'play']	app['medium', 'player', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.hardware.Camera: void release()>	activity_scream.xml:['camera']	app[]	ui-unmatch
<android.media.MediaPlayer: void release()>	activity_scream.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	activity_scream.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call']	app['call']	ui-unmatch
--------------------------------
<android.view.View$DragShadowBuilder: android.view.View getView()>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	dialog_apk_audit_enquiry.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	dialog_apk_audit_enquiry.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: long length()>	app:[]	app[]
--------------------------------
<android.widget.ImageView: void getLocationOnScreen(int[])>	activity_overlay.xml:['location']	app[]	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>	activity_scream.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.hardware.Camera: void stopPreview()>	activity_scream.xml:['camera']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.app.ActivityManager: int getMemoryClass()>	app:[]	app[]
<android.app.ActivityManager: int getLargeMemoryClass()>	app:[]	app[]
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call']	app['call']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)>	activity_backup_2.xml:['telephony', 'sms', 'sms']	app['telephony', 'sms', 'sms']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	activity_device_main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: void <init>(android.content.Context)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void <init>(android.content.Context)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTextColor(int)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setText(java.lang.CharSequence)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setTextSize(float)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void addView(android.view.View)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	app:[]	app[]
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
