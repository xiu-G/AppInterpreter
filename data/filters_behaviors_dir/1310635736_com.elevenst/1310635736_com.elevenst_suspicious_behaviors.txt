<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	qr_code.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void startPreview()>	qr_code.xml:['camera']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	bestseller.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	bestseller.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	bestseller.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	bestseller.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	category_product.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	category_product.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>	app:[]	app[]
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.hardware.Camera: void stopPreview()>	app:[]	app[]
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	search_product.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	search_product.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	search_product.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	facebook_sender.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	intro.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	intro.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	review.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	review.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	today.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	today.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	today.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	today.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	my.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	my.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	my.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	my.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	search.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	search.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	search.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	search.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	search.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	search.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	bestseller.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	bestseller.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	bestseller.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bestseller.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app:['picture']	app['picture']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	widget_activity.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	common_preview.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	common_preview.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	common_preview.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	common_preview.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<android.addextras.search_word: void <init>()>	common_preview.xml:['word']	app['word']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	review.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	today.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	today.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	today.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	today.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	my.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	my.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	my.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	my.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	search.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	search.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	search.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	search.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	search.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	search.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	bestseller.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	bestseller.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	bestseller.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bestseller.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	my.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	my.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	my.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	my.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	today.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	today.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	today.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	today.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	today.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	today.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	today.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	today.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Date: int getHours()>	today.xml:['hour']	app['hour']	ui-unmatch
<java.util.Date: void setHours(int)>	today.xml:['hour']	app['hour']	ui-unmatch
<java.util.Date: int getHours()>	today.xml:['hour']	app['hour']	ui-unmatch
<java.util.Date: void setHours(int)>	today.xml:['hour']	app['hour']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URI toURI()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	search_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	search_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	search_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	search_product.xml:['file']	app['file']	ui-unmatch
<android.addextras.search_word: void <init>()>	search_product.xml:['word']	app['word']	ui-unmatch
<android.addextras.LINK_URL: void <init>()>	widget_activity.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.addextras.android.speech.action.RECOGNIZE_SPEECH: void <init>()>	search.xml:['speech']	app['speech']	ui-unmatch
<java.io.File: java.lang.String getPath()>	search.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	search.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	today.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	today.xml:['storage']	app['storage']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	today.xml:['url']	app['url']	ui-unmatch
<java.io.File: java.lang.String getPath()>	today.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	today.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera: void release()>	app:[]	app[]
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	qr_code.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	today.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	today.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	today.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	today.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	my.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	my.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	my.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	my.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	search.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	search.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	search.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	search.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	search.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	search.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	bestseller.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	bestseller.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	bestseller.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	bestseller.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.addextras.LINK_URL: void <init>()>	search.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	category_sub.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	category_sub.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	twitter_sender.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	twitter_sender.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	twitter_sender.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	review.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	review.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	review.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	review.xml:['storage']	app['storage']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getQuery()>	app:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getRef()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	category.xml:['url']	app['url']	ui-unmatch
<java.io.File: java.lang.String getPath()>	category.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	category.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	facebook_sender.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	facebook_sender.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.addextras.access_token: void <init>()>	facebook_sender.xml:['access']	app['access']	ui-unmatch
<android.addextras.failing_url: void <init>()>	facebook_sender.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	qr_search_sender.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.addextras.access_token: void <init>()>	app:['access']	app['access']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	intro.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	intro.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.lang.String)>	intro.xml:['file']	app['file']	ui-unmatch
<java.util.Date: void setYear(int)>	intro.xml:['year']	app['year']	ui-unmatch
<java.util.Date: void setMonth(int)>	intro.xml:['month']	app['month']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	intro.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	intro.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	review.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	review.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	review.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	category_product.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	category_product.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	category_product.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	category_sub.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
