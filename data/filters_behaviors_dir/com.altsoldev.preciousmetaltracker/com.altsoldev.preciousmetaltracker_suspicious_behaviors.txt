<android.webkit.WebSettings: void setUseWideViewPort(boolean)>	activity_silverprices_noad.xml:['port']	app['port']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	activity_silverprices_noad.xml:['url']	app['url']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	activity_silverprices_noad.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	activity_silverprices_noad.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	activity_silverprices_noad.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	activity_silverprices_noad.xml:['file']	app['file']	ui-unmatch
<android.content.Context: boolean deleteFile(java.lang.String)>	activity_silverprices_noad.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>	activity_silverprices_noad.xml:['installer']	app['installer']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	activity_home_tablet.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_home_tablet.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	activity_home_tablet.xml:['timer']	app['timer']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_home_tablet.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_home_tablet.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.net.URL getURL()>	activity_home_tablet.xml:['http', 'url', 'url']	app['http', 'url', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	activity_home_tablet.xml:['http', 'url', 'connect']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.ParcelFileDescriptor: long getStatSize()>	activity_home_tablet.xml:['file', 'stat']	app['file', 'stat']	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.net.URL: java.lang.String getPath()>	activity_home_tablet.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	activity_home_tablet.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	activity_home_tablet.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean setLastModified(long)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	activity_home_tablet.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_home_tablet.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	activity_home_tablet.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	activity_home_tablet.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_home_tablet.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	activity_home_tablet.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	activity_home_tablet.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	activity_home_tablet.xml:['file']	app['file']	ui-unmatch
<android.addextras.com.facebook.platform.protocol.CALL_ID: void <init>()>	activity_home_tablet.xml:['call']	app['call']	ui-unmatch
<android.addextras.com.facebook.platform.protocol.CALL_ID: void <init>()>	activity_home_tablet.xml:['call']	app['call']	ui-unmatch
<android.addextras.INAPP_PURCHASE_DATA: void <init>()>	activity_home_tablet.xml:[]	app[]
--------------------------------
<android.addextras.com.facebook.TokenCachingStrategy.AccessTokenSource: void <init>()>	activity_home_tablet.xml:['access']	app['access']	ui-unmatch
<android.addextras.com.facebook.TokenCachingStrategy.Permissions: void <init>()>	activity_home_tablet.xml:['permission']	app['permission']	ui-unmatch
<android.addextras.com.facebook.UiLifecycleHelper.pendingFacebookDialogCallKey: void <init>()>	activity_home_tablet.xml:['call']	app['call']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>	activity_goldprices_landscape.xml:['port']	app['port']	ui-unmatch
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	activity_home_tablet.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	activity_newspreview.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>	activity_platinum_tablet.xml:['port']	app['port']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>	activity_goldsilverratio_landscape.xml:['port']	app['port']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	activity_newsfeed_landscape.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	activity_newsfeed_landscape.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	activity_newsfeed_landscape.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	activity_newsfeed_landscape.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	activity_newsfeed_landscape.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	activity_newsfeed_landscape.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	activity_newsfeed_landscape.xml:['http', 'url', 'connect']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	activity_newsfeed_landscape.xml:['http', 'url', 'connect']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	activity_newsfeed_landscape.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	activity_newsfeed_landscape.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>	activity_palladium_tablet.xml:['port']	app['port']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	activity_splash.xml:['timer']	app['timer']	ui-unmatch
<android.app.Activity: void onPause()>	activity_splash.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	activity_splash.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	activity_splash.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	activity_splash.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	activity_splash.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Timer: void <init>()>	activity_splash.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	activity_splash.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	activity_splash.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>	activity_newspreview.xml:['port']	app['port']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>	app:['http']	app['http']	ui-unmatch
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>	app:['http']	app['http']	ui-unmatch
<android.net.http.AndroidHttpClient: void close()>	app:['http']	app['http']	ui-unmatch
--------------------------------
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
