<android.media.MediaPlayer: void release()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setVolume(float,float)>	main.xml:['medium', 'player', 'volume']	app['medium', 'player', 'volume']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	main.xml:['medium', 'player', 'play']	app['medium', 'player', 'play']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	main.xml:['medium', 'store', 'audio', 'medium']	app['medium', 'store', 'audio', 'medium']	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	main.xml:['medium', 'store', 'audio', 'medium']	app['medium', 'store', 'audio', 'medium']	ui-unmatch
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>	main.xml:['ring', 'ring']	app[]	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	main.xml:['ring']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>	main.xml:['ring', 'ring']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>	main.xml:['ring', 'ring']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	app:['medium', 'store', 'audio', 'medium']	app['medium', 'store', 'audio', 'medium']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
