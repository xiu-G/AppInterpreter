<java.util.Timer: void cancel()>	talklist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	talklist.xml:['location']	app['location']	ui-unmatch
<java.io.File: boolean isDirectory()>	talklist.xml:['file', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	talklist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	talklist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	talklist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	talklist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	talklist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.AudioRecord: void stop()>	recorder.xml:['audio']	app[]	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	recorder.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.RandomAccessFile: void writeInt(int)>	recorder.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.RandomAccessFile: void close()>	recorder.xml:['access', 'file']	app['access']	ui-unmatch
<android.media.AudioRecord: void release()>	recorder.xml:['audio']	app[]	ui-unmatch
<android.media.MediaPlayer: void stop()>	recorder.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void release()>	recorder.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	talk_flipper_popup.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	talk_flipper_popup.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	talk_flipper_popup.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	talk_flipper_popup.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	talk_flipper_popup.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	chatlist.xml:['script']	app['script']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	chatlist.xml:['permission']	app['permission']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	chatlist.xml:['script']	app['script']	ui-unmatch
<android.media.MediaMetadataRetriever: void <init>()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	chatlist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	chatlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	chatlist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	chatlist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	chatlist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	chatlist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	chatlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	chatlist.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	chatlist.xml:['url']	app['url']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	chatlist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	chatlist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.media.MediaMetadataRetriever: void <init>()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	chatlist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.app.ListActivity: void onPause()>	chatlist.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	ffm_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	ffm_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	ffm_main.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	talkinbox.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.view.View: void getLocationInWindow(int[])>	app:['location']	app['location']	ui-unmatch
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>	talk_flipper_popup.xml:['sms']	app[]	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	talk_flipper_popup.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	pmmlist.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	pmmlist.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	pmmlist.xml:['file']	app[]	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	pmmlist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
<android.media.MediaMetadataRetriever: void <init>()>	app:[]	app[]
<android.media.MediaMetadataRetriever: void setMode(int)>	app:[]	app[]
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	app:[]	app[]
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	app:[]	app[]
<android.media.MediaMetadataRetriever: void release()>	app:[]	app[]
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	talklist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.media.MediaMetadataRetriever: void <init>()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	talklist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	talklist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	talklist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	talklist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	talklist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	talklist.xml:['file']	app[]	ui-unmatch
<java.nio.channels.FileChannel: long size()>	talklist.xml:['file']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void <init>()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	talklist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	talklist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	talklist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>	photolist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	app:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.provider.SearchRecentSuggestions: void clearHistory()>	app:['history']	app['history']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	friendlist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	videolist.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	chatlist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	chatlist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	pmmlist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	pmmlist.xml:['location']	app['location']	ui-unmatch
<android.view.View: void getLocationOnScreen(int[])>	pmmlist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	recorder.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>	app:[]	app[]
<android.media.MediaScannerConnection: void connect()>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	tonelist.xml:['host']	app['host']	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>	tonelist.xml:[]	app[]
--------------------------------
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	chatlist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	videoplayer.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	videoplayer.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	videoplayer.xml:['video']	app[]	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	videoplayer.xml:['medium']	app[]	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	videoplayer.xml:['medium']	app[]	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	videoplayer.xml:['video', 'medium']	app[]	ui-unmatch
<android.widget.VideoView: void setVideoURI(android.net.Uri)>	videoplayer.xml:['video', 'video']	app[]	ui-unmatch
<android.widget.VideoView: void start()>	videoplayer.xml:['video']	app[]	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	photolist.xml:['host']	app['host']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	camera.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	friendlist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void release()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	contacttab.xml:['choice']	app['choice']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	contacttab.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	contacttab.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	friend_list_pmm.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	chatlist.xml:['location']	app['location']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	talklist.xml:['url']	app['url']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String toString()>	talklist.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	talklist.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	blogitem_list.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	recorder.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	recorder.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	recorder.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	recorder.xml:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	recorder.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	recorder.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.FileNotFoundException: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	sms.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	sms.xml:['sms']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	talk_flipper_popup.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	blogitem_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.hardware.Camera: void stopPreview()>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void startPreview()>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void release()>	camera.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.hardware.Camera: void stopPreview()>	camera.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void release()>	camera.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	camera.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String toString()>	photolist.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	ffm_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setChecked(boolean)>	ffm_main.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>	photoflipper.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	photoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	pmmlist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	pmmlist.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	pmmlist.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	pmmlist.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	pmmlist.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	pmmlist.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	pmmlist.xml:['file', 'directory']	app['directory']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	pmmlist.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	pmmlist.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	pmmlist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	photolist.xml:['host']	app['host']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>	tonelist.xml:[]	app[]
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	tonelist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.app.TabActivity: android.widget.TabHost getTabHost()>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	contacttab.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	list_content_simple.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	audio_player.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)>	audio_player.xml:['medium', 'medium', 'player']	app['player']	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	audio_player.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.widget.MediaController: void show()>	audio_player.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	roomlist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	recorder.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	tonelist.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	tonelist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.AudioRecord: int read(byte[],int,int)>	app:[]	app[]
<java.io.RandomAccessFile: void write(byte[])>	app:['access']	app['access']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>	photolist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	blogitem_list.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.media.MediaScannerConnection: void disconnect()>	app:['disconnect']	app['disconnect']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	blogitem_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	blogitem_list.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	blogitem_list.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	blogitem_list.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blogitem_list.xml:['file', 'directory']	app['directory']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blogitem_list.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	blogitem_list.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	ffm_main.xml:['file', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	ffm_main.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	ffm_main.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	ffm_main.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	ffm_main.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	tonelist.xml:['pause']	app['pause']	ui-unmatch
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void start()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.io.File: long lastModified()>	recorder.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	recorder.xml:['file']	app[]	ui-unmatch
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>	recorder.xml:['medium', 'store', 'audio']	app['store']	ui-unmatch
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>	recorder.xml:['medium', 'store', 'audio']	app['store']	ui-unmatch
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>	recorder.xml:['medium', 'store', 'audio']	app['store']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void acquire()>	recorder.xml:['power']	app[]	ui-unmatch
<android.os.PowerManager$WakeLock: boolean isHeld()>	recorder.xml:['power']	app[]	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	recorder.xml:['power']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	talklist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getDuration()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	recorder.xml:['storage', 'directory']	app['directory']	ui-unmatch
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	recorder.xml:['power']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	recorder.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	recorder.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	recorder.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void pause()>	audio_player.xml:['medium', 'player', 'pause']	app['player', 'pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['player']	app['player']	ui-unmatch
--------------------------------
