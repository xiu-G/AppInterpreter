----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioRecord: void stop()>    	['audio', 'record']
<java.io.RandomAccessFile: void seek(long)>    	['access', 'file']
<java.io.RandomAccessFile: void writeInt(int)>    	['access', 'file']
<java.io.RandomAccessFile: void close()>    	['access', 'file']
<android.media.AudioRecord: void release()>    	['audio', 'record']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
----------------------------
----------------------------
<android.app.ListActivity: void onPause()>    	['pause']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationInWindow(int[])>    	['location']
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>    	['sms']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>    	['file']
<java.nio.channels.FileChannel: long size()>    	['file']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.SearchRecentSuggestions: void clearHistory()>    	['history']
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: long skip(long)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>    	['ring', 'ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>    	['medium']
<android.media.MediaScannerConnection: void connect()>    	['medium', 'connect']
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>    	['ring', 'ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['video']
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['video']
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>    	['video']
<android.widget.MediaController: void <init>(android.content.Context)>    	['medium']
<android.widget.MediaController: void setAnchorView(android.view.View)>    	['medium']
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>    	['video', 'medium']
<android.widget.VideoView: void setVideoURI(android.net.Uri)>    	['video', 'video']
<android.widget.VideoView: void start()>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>    	['host', 'indicator']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setCurrentTab(int)>    	['host']
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
<java.io.FileNotFoundException: java.lang.String toString()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<android.widget.MediaController: void setEnabled(boolean)>    	['medium']
<android.widget.MediaController: void show()>    	['medium']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>    	['file', 'url']
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>    	['medium', 'store', 'audio', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: long skip(long)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.hardware.Camera: void startPreview()>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.io.FileNotFoundException: java.lang.String toString()>    	['file']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: long skip(long)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>    	['ring', 'ring']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: long skip(long)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.TabActivity: android.widget.TabHost getTabHost()>    	['host']
<android.widget.TabHost: int getCurrentTab()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>    	['medium', 'store', 'audio', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void reset()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>    	['medium', 'player']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.widget.MediaController: void <init>(android.content.Context)>    	['medium']
----------------------------
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)>    	['medium', 'medium', 'player']
<android.widget.MediaController: void setAnchorView(android.view.View)>    	['medium']
----------------------------
----------------------------
<android.widget.MediaController: void show()>    	['medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
<android.media.AudioRecord: int read(byte[],int,int)>    	['audio', 'record']
<java.io.RandomAccessFile: void write(byte[])>    	['access', 'file']
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
----------------------------
----------------------------
<android.media.MediaScannerConnection: void scanFile(java.lang.String,java.lang.String)>    	['medium', 'file']
----------------------------
<android.media.MediaScannerConnection: void disconnect()>    	['medium', 'disconnect']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>    	['ring', 'ring']
----------------------------
----------------------------
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
<java.io.File: long lastModified()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'audio']
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'audio']
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>    	['medium', 'store', 'audio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>    	['medium', 'store', 'video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>    	['medium', 'store', 'video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>    	['medium', 'store']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void pause()>    	['medium', 'player', 'pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
