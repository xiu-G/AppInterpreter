<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main.xml:['language']	app['language']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.addextras.DEVICE_ID: void <init>()>	main.xml:['device']	app['device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.TimerTask: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	main.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
<java.util.Timer: void cancel()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	main.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.location.LocationManager: java.util.List getAllProviders()>	main.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	main.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	main.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<java.util.Timer: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	main.xml:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	main.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	main.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: long getTime()>	main.xml:['location']	app['location']	ui-unmatch
<java.util.Timer: void cancel()>	main.xml:['timer']	app['timer']	ui-unmatch
<android.widget.VideoView: void setVisibility(int)>	main.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void start()>	main.xml:['video']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	video_comment.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	video_comment.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	video_comment.xml:['file']	app['file']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	uploaded_to_fb.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	uploaded_to_fb.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	uploaded_to_fb.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	uploaded_to_fb.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	uploaded_to_fb.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	uploaded_to_fb.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	uploaded_to_fb.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	uploaded_to_fb.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	uploaded_to_fb.xml:['http', 'url']	app['url']	ui-unmatch
<android.media.AudioTrack: int getState()>	video_comment.xml:['audio']	app['audio']	ui-unmatch
<android.media.AudioTrack: void stop()>	video_comment.xml:['audio']	app['audio']	ui-unmatch
<android.media.AudioTrack: void release()>	video_comment.xml:['audio']	app['audio']	ui-unmatch
<android.media.AudioRecord: void <init>(int,int,int,int,int)>	video_comment.xml:['audio', 'record']	app['audio', 'record']	ui-unmatch
<android.media.AudioRecord: void startRecording()>	video_comment.xml:['audio', 'record', 'record']	app['audio', 'record', 'record']	ui-unmatch
<android.media.AudioRecord: void release()>	video_comment.xml:['audio', 'record']	app['audio', 'record']	ui-unmatch
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.media.MediaScannerConnection: void connect()>	main.xml:['medium', 'connect']	app['medium', 'connect']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)>	main.xml:['speech']	app['speech']	ui-unmatch
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>	main.xml:['speech', 'language']	app['speech', 'language']	ui-unmatch
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)>	main.xml:['speech', 'file']	app['speech', 'file']	ui-unmatch
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>	main.xml:['speech']	app['speech']	ui-unmatch
--------------------------------
