----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>    	['address']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.addextras.DEVICE_ID: void <init>()>    	['device']
<android.addextras.ADVIEW: void <init>()>    	['ad']
----------------------------
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getDataDirectory()>    	['directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>    	['address']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>    	['telephony']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<android.net.Proxy: java.lang.String getDefaultHost()>    	['host']
<android.net.Proxy: int getDefaultPort()>    	['port']
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>    	['address']
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
----------------------------
