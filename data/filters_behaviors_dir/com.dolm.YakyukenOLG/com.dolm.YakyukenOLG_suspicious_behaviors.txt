<java.util.Timer: void <init>()>	logo.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	logo.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	logo.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	logo.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	logo.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	logo.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	logo.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	logo.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	logo.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	logo.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	logo.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	logo.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	logo.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	logo.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	logo.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	logo.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	logo.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	logo.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	logo.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	logo.xml:['language']	app['language']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	logo.xml:['telephony']	app['telephony']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	logo.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	logo.xml:['address']	app['address']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	logo.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	logo.xml:['network']	app['network']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	logo.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	logo.xml:['file']	app['file']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	logo.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	logo.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.addextras.DEVICE_ID: void <init>()>	logo.xml:['device']	app['device']	ui-unmatch
<android.addextras.ADVIEW: void <init>()>	logo.xml:['ad']	app['ad']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	gamepro.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	gamepro.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	gamepro.xml:['sound', 'play']	app['sound']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	gamepro.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	gamepro.xml:['sound']	app['sound']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	gamepro.xml:['script']	app['script']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	main.xml:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String toString()>	main.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main.xml:['permission']	app['permission']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	main.xml:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	main.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	main.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>	main.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLatitude()>	main.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	main.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	main.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	gamepro.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	gamepro.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	gamepro.xml:['sound', 'play']	app['sound']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	main.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	main.xml:['telephony']	app['telephony']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	main.xml:['network']	app['network']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	app:['port']	app['port']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
