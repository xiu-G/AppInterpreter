<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	birthday.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	birthday.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	qingrenmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	qingrenmain.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	battery.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: java.util.List getSensorList(int)>	lap.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	lap.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>	lap.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.hardware.Sensor: int getType()>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	compass.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
--------------------------------
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	systeminfo.xml:['file']	app['file']	ui-unmatch
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>	systeminfo.xml:['directory']	app['directory']	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	systeminfo.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.Sensor: int getType()>	systeminfo.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Sensor: java.lang.String getName()>	systeminfo.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Sensor: java.lang.String getVendor()>	systeminfo.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Sensor: int getVersion()>	systeminfo.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Sensor: float getResolution()>	systeminfo.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Sensor: float getMaximumRange()>	systeminfo.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Sensor: float getPower()>	systeminfo.xml:['sensor', 'power']	app['sensor', 'power']	ui-unmatch
<android.telephony.TelephonyManager: int getCallState()>	systeminfo.xml:['telephony', 'call']	app['telephony', 'call']	ui-unmatch
<android.telephony.TelephonyManager: int getDataActivity()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getDataState()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	systeminfo.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>	systeminfo.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	systeminfo.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	systeminfo.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	systeminfo.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: int getNetworkType()>	systeminfo.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	systeminfo.xml:['telephony', 'phone']	app['telephony', 'phone']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>	systeminfo.xml:['telephony', 'country']	app['telephony', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>	systeminfo.xml:['telephony', 'voice']	app['telephony', 'voice']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>	systeminfo.xml:['telephony', 'voice']	app['telephony', 'voice']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	systeminfo.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>	systeminfo.xml:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: int getIpAddress()>	systeminfo.xml:['address']	app['address']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>	systeminfo.xml:['address']	app['address']	ui-unmatch
<android.net.wifi.WifiInfo: int getLinkSpeed()>	systeminfo.xml:['speed']	app['speed']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	systeminfo.xml:['address']	app['address']	ui-unmatch
<android.net.wifi.WifiInfo: int getNetworkId()>	systeminfo.xml:['network']	app['network']	ui-unmatch
<android.telephony.NeighboringCellInfo: int getNetworkType()>	systeminfo.xml:['network']	app['network']	ui-unmatch
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	systeminfo.xml:['radio']	app[]	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setTextColor(int)>	charmain.xml:['radio']	app[]	ui-unmatch
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	charmain.xml:['radio']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	load.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	load.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	load.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	load.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	load.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	appmain.xml:['telephony']	app['telephony']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	appmain.xml:['alarm']	app['alarm']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	appmain.xml:['alarm']	app['alarm']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	appmain.xml:['alarm']	app['alarm']	ui-unmatch
<java.util.Date: int getYear()>	appmain.xml:['year']	app['year']	ui-unmatch
<java.util.Date: int getMonth()>	appmain.xml:['month']	app['month']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	appmain.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	appmain.xml:['storage']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	appmain.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	appmain.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	appmain.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	appmain.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	appmain.xml:['storage']	app[]	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.location.Location: void <init>(java.lang.String)>	appmain.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	appmain.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	appmain.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	appmain.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	appmain.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.location.Location: void setLatitude(double)>	appmain.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	appmain.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>	appmain.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>	appmain.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	appmain.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	appmain.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	appmain.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	appmain.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	appmain.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	appmain.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	appmain.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdir()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	appmain.xml:['storage']	app[]	ui-unmatch
<java.io.File: java.lang.String getParent()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	appmain.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getAbsoluteFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean equals(java.lang.Object)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.util.Date: int getYear()>	appmain.xml:['year']	app['year']	ui-unmatch
<java.util.Date: int getMonth()>	appmain.xml:['month']	app['month']	ui-unmatch
<java.util.TimerTask: void <init>()>	appmain.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	appmain.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	appmain.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdir()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	appmain.xml:['store']	app['store']	ui-unmatch
<java.io.FileOutputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	appmain.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	appmain.xml:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdir()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	appmain.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	appmain.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	appmain.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	appmain.xml:['network']	app['network']	ui-unmatch
<android.location.Location: void <init>(java.lang.String)>	appmain.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	appmain.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	appmain.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	appmain.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	appmain.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.location.Location: void setLatitude(double)>	appmain.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	appmain.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>	appmain.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>	appmain.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	appmain.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	appmain.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	appmain.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	appmain.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	appmain.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	appmain.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	appmain.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	appmain.xml:['storage']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	appmain.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	appmain.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setId(int)>	appmain.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: android.view.ViewGroup$LayoutParams getLayoutParams()>	appmain.xml:['video']	app['video']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.widget.VideoView: void setVideoPath(java.lang.String)>	appmain.xml:['video', 'video']	app['video', 'video']	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	appmain.xml:['video', 'medium']	app['video', 'medium']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	appmain.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	appmain.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	appmain.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void start()>	appmain.xml:['video']	app['video']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdir()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getAbsoluteFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean equals(java.lang.Object)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	appmain.xml:['calendar']	app['calendar']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	appmain.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	appmain.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	appmain.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	appmain.xml:['storage', 'directory']	app['directory']	ui-unmatch
--------------------------------
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	runningservice.xml:['file']	app['file']	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	runningservice.xml:['access']	app['access']	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	runningservice.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	runningservice.xml:['memory']	app['memory']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	runningservice.xml:['file']	app['file']	ui-unmatch
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>	app:['indicator']	app['indicator']	ui-unmatch
--------------------------------
<android.widget.RadioButton: java.lang.CharSequence getText()>	prenamemain.xml:['radio']	app[]	ui-unmatch
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	prenamemain.xml:['radio']	app[]	ui-unmatch
--------------------------------
<android.widget.VideoView: void stopPlayback()>	appmain.xml:['video']	app['video']	ui-unmatch
<java.util.Timer: void cancel()>	appmain.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	flashlight.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	flashlight.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	flashlight.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void release()>	flashlight.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	wuxingmain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	wuxingmain.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	prenamemain.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	prenamemain.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	compass.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.hardware.Sensor: int getType()>	compass.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>	compass.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>	compass.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	compass.xml:['pause']	app['pause']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	compass.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>	yunshi_main.xml:['radio']	app[]	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	vibrator.xml:['radio']	app[]	ui-unmatch
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>	vibrator.xml:['radio']	app[]	ui-unmatch
--------------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
