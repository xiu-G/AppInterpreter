----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
----------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>    	['sensor']
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Sensor: int getType()>    	['sensor']
----------------------------
----------------------------
----------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>    	['directory']
<android.hardware.SensorManager: java.util.List getSensorList(int)>    	['sensor', 'sensor']
<android.hardware.Sensor: int getType()>    	['sensor']
<android.hardware.Sensor: java.lang.String getName()>    	['sensor']
<android.hardware.Sensor: java.lang.String getVendor()>    	['sensor']
<android.hardware.Sensor: int getVersion()>    	['sensor']
<android.hardware.Sensor: float getResolution()>    	['sensor']
<android.hardware.Sensor: float getMaximumRange()>    	['sensor']
<android.hardware.Sensor: float getPower()>    	['sensor', 'power']
<android.telephony.TelephonyManager: int getCallState()>    	['telephony', 'call']
<android.telephony.TelephonyManager: int getDataActivity()>    	['telephony']
<android.telephony.TelephonyManager: int getDataState()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>    	['telephony', 'network', 'country']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>    	['telephony', 'network']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.telephony.TelephonyManager: int getNetworkType()>    	['telephony', 'network']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>    	['telephony', 'country']
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>    	['telephony']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>    	['telephony', 'voice']
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>    	['telephony', 'voice']
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>    	['telephony', 'location']
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>    	['telephony']
<android.net.wifi.WifiInfo: int getIpAddress()>    	['address']
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>    	['address']
<android.net.wifi.WifiInfo: int getLinkSpeed()>    	['speed']
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>    	['address']
<android.net.wifi.WifiInfo: int getNetworkId()>    	['network']
<android.telephony.NeighboringCellInfo: int getNetworkType()>    	['network']
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>    	['radio']
----------------------------
----------------------------
<android.widget.RadioButton: int getId()>    	['radio']
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setTextColor(int)>    	['radio']
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
----------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>    	['alarm']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>    	['alarm']
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>    	['alarm']
<java.util.Date: int getYear()>    	['year']
<java.util.Date: int getMonth()>    	['month']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.location.Location: void <init>(java.lang.String)>    	['location']
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>    	['telephony', 'location']
<android.telephony.gsm.GsmCellLocation: int getCid()>    	['location']
<android.telephony.gsm.GsmCellLocation: int getLac()>    	['location']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>    	['telephony', 'network']
<android.location.Location: void setLatitude(double)>    	['location', 'latitude']
<android.location.Location: void setLongitude(double)>    	['location', 'longitude']
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>    	['location', 'longitude']
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.io.File getAbsoluteFile()>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean equals(java.lang.Object)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.util.Date: int getYear()>    	['year']
<java.util.Date: int getMonth()>    	['month']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.location.Location: void <init>(java.lang.String)>    	['location']
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>    	['telephony', 'location']
<android.telephony.gsm.GsmCellLocation: int getCid()>    	['location']
<android.telephony.gsm.GsmCellLocation: int getLac()>    	['location']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>    	['telephony', 'network']
<android.location.Location: void setLatitude(double)>    	['location', 'latitude']
<android.location.Location: void setLongitude(double)>    	['location', 'longitude']
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>    	['location', 'longitude']
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.widget.VideoView: void <init>(android.content.Context)>    	['video']
<android.widget.VideoView: void setId(int)>    	['video']
<android.widget.VideoView: android.view.ViewGroup$LayoutParams getLayoutParams()>    	['video']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.VideoView: void setVideoPath(java.lang.String)>    	['video', 'video']
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>    	['video', 'medium']
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['video']
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['video']
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>    	['video']
<android.widget.VideoView: void start()>    	['video']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: java.io.File getAbsoluteFile()>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean equals(java.lang.Object)>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String[] list()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>    	['file']
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>    	['file']
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>    	['indicator']
----------------------------
<android.widget.RadioButton: java.lang.CharSequence getText()>    	['radio']
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: void stopPlayback()>    	['video']
<java.util.Timer: void cancel()>    	['timer']
----------------------------
<android.widget.RadioButton: int getId()>    	['radio']
<android.widget.RadioButton: java.lang.CharSequence getText()>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
----------------------------
<android.hardware.Sensor: int getType()>    	['sensor']
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>    	['sensor']
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>    	['sensor']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>    	['sensor']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
