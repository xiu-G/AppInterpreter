<android.app.Activity: void onPause()>	schedule.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	memo.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	memo.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	memo.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	memo.xml:['calendar']	app[]	ui-unmatch
<android.app.Activity: void onPause()>	memo.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.DatePicker: int getYear()>	app:['year']	app['year']	ui-unmatch
<android.widget.DatePicker: int getMonth()>	app:['month']	app['month']	ui-unmatch
<android.widget.DatePicker: int getDayOfMonth()>	app:['day', 'month']	app['day', 'month']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:[]	app[]
<java.util.Calendar: void set(int,int,int)>	main.xml:[]	app[]
<java.util.Calendar: int get(int)>	main.xml:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:[]	app[]
<java.util.Calendar: void set(int,int,int)>	main.xml:[]	app[]
<java.util.Calendar: int get(int)>	main.xml:[]	app[]
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: int get(int)>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	schedule.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void set(int,int)>	schedule.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	schedule.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.Ringtone: void play()>	app:['ring']	app['ring']	ui-unmatch
<android.media.Ringtone: void stop()>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	others.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.text.method.PasswordTransformationMethod: void <init>()>	app:['password']	app['password']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: void set(int,int,int,int,int,int)>	app:[]	app[]
<java.util.Calendar: long getTimeInMillis()>	app:[]	app[]
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<android.widget.TimePicker: java.lang.Integer getCurrentHour()>	app:['hour']	app['hour']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
--------------------------------
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main.xml:['permission']	app['permission']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:[]	app[]
<java.util.Calendar: int get(int)>	main.xml:[]	app[]
<java.util.Calendar: void set(int,int)>	main.xml:[]	app[]
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	main.xml:['file']	app['file']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	main.xml:['choice']	app['choice']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	main.xml:['choice']	app['choice']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	main.xml:['choice']	app['choice']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	main.xml:['file']	app['file']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	main.xml:['choice']	app['choice']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: boolean canWrite()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	others.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
