<android.media.SoundPool: void stop(int)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.webkit.WebView: void getLocationOnScreen(int[])>	act_achievement_board.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	act_achievement_board.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	act_achievement_board.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	act_achievement_board.xml:['location']	app['location']	ui-unmatch
<android.location.Location: long getTime()>	act_achievement_board.xml:['location']	app['location']	ui-unmatch
<android.location.Location: double getLatitude()>	act_achievement_board.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	act_achievement_board.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	act_achievement_board.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	coconutlabs.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.SoundPool: void stop(int)>	result_end.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: void release()>	result_end.xml:['sound']	app['sound']	ui-unmatch
<android.media.MediaPlayer: void reset()>	result_end.xml:['medium', 'player']	app['medium']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	result_end.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	result_end.xml:['sound']	app['sound']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	result_end.xml:['medium', 'player']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	result_end.xml:['medium', 'player']	app['medium']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	result_end.xml:['medium', 'player']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void start()>	result_end.xml:['medium', 'player']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void stop()>	result_end.xml:['medium', 'player']	app['medium']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	result_end.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	title.xml:['medium']	app['medium']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: void setVolume(int,float,float)>	app:['sound', 'volume']	app['sound', 'volume']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	main.xml:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void pause()>	app:['medium', 'pause']	app['medium', 'pause']	ui-unmatch
--------------------------------
