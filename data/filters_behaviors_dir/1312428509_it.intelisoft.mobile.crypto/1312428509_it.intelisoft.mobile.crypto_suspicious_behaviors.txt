<java.util.Calendar: java.util.Calendar getInstance()>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void add(int,int)>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	sequenceconf.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	sequenceconf.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	sequenceconf.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	sequenceconf.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	sequenceconf.xml:['language']	app['language']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	sequenceconf.xml:['calendar']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	sequenceconf.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	sequenceconf.xml:['language']	app['language']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	sequenceconf.xml:['storage']	app['storage']	ui-unmatch
<java.io.FileWriter: void <init>(java.lang.String)>	sequenceconf.xml:['file']	app[]	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	sequenceconf.xml:['file']	app[]	ui-unmatch
<java.io.FileWriter: void close()>	sequenceconf.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.io.FileWriter: void <init>(java.lang.String,boolean)>	app:[]	app[]
<java.io.FileWriter: void write(java.lang.String)>	app:[]	app[]
<java.io.FileWriter: void close()>	app:[]	app[]
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void reset()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	app:[]	app[]
<java.io.FileReader: void close()>	app:[]	app[]
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	sequenceconf.xml:['storage']	app['storage']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	sequenceconf.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	sequenceconf.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	sequenceconf.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	sequenceconf.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	sequenceconf.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	sequenceconf.xml:['language']	app['language']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	sequenceconf.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	sequenceconf.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	sequenceconf.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.hardware.Sensor: int getType()>	app:['sensor']	app['sensor']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
