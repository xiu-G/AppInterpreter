<android.media.AudioManager: int getStreamMaxVolume(int)>	entry.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	entry.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	entry.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound', 'play']	app['sound', 'play']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	about.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	about.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	about.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	about.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	about.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	about.xml:['sound']	app['sound']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	about.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	about.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound', 'play']	app['sound', 'play']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	logo.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	rank.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	rank.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	rank.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	rank.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	rank.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	rank.xml:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.media.SoundPool: void <init>(int,int,int)>	logo.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	logo.xml:['sound']	app['sound']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	logo.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	logo.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	logo.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	logo.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	logo.xml:['network']	app['network']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	logo.xml:['permission']	app['permission']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	logo.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	logo.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	logo.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	logo.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>	logo.xml:['telephony']	app['telephony']	ui-unmatch
<android.location.Location: double getLongitude()>	logo.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	logo.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	logo.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	logo.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	logo.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	logo.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	logo.xml:['network']	app['network']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	exp.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	exp.xml:['sound']	app['sound']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	exp.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	exp.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	exp.xml:['sound', 'play']	app['sound', 'play']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	exp.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	entry.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	entry.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	entry.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	entry.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	rank.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	rank.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound', 'play']	app['sound', 'play']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	entry.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: boolean cancel()>	entry.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	entry.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	entry.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	entry.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	entry.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	entry.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	entry.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	entry.xml:['sound']	app['sound']	ui-unmatch
--------------------------------
