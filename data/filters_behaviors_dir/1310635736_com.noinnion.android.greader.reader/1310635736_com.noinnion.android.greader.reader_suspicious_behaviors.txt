<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.addextras.access_token: void <init>()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	facebook.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.addextras.access_token: void <init>()>	facebook.xml:['access']	app['access']	ui-unmatch
<android.addextras.failing_url: void <init>()>	facebook.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	download_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	item_fragment.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	item_fragment.xml:['network']	app['network']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	item_fragment.xml:['file', 'access']	app['file', 'access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	item_fragment.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	item_fragment.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	item_fragment.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	item_fragment.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<java.util.Date: int getYear()>	item_fragment.xml:['year']	app['year']	ui-unmatch
<java.util.Date: int getMonth()>	item_fragment.xml:['month']	app['month']	ui-unmatch
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	item_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
--------------------------------
<android.addextras.com.noinnion.android.greader.reader.action.START_START_DOWNLOADING: void <init>()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean canWrite()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	home_multipane.xml:['clock']	app['clock']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	home_multipane.xml:['alarm']	app['alarm']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	home_multipane.xml:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	download_list.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String toString()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	download_list.xml:['file']	app['file']	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	download_list.xml:['medium', 'store', 'audio', 'medium']	app['medium', 'store', 'audio', 'medium']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.Object getContent()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	download_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.addextras.com.noinnion.android.greader.reader_history: void <init>()>	app:['history']	app['history']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	app:['file', 'access']	app['file', 'access']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	item_fragment.xml:['permission']	app['permission']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	item_fragment.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	item_fragment.xml:['country']	app['country']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
--------------------------------
<android.app.TabActivity: android.widget.TabHost getTabHost()>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	home_multipane.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<android.addextras.download_local: void <init>()>	download_list.xml:[]	app[]
<android.addextras.download_type: void <init>()>	download_list.xml:[]	app[]
<android.addextras.download_messenger: void <init>()>	download_list.xml:[]	app[]
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	home.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	home_multipane.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	login.xml:[]	app[]
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	login.xml:[]	app[]
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>	login.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.support.v4.app.Fragment: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	change_log.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	change_log.xml:['script']	app['script']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	item_fragment.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	item_fragment.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	item_fragment.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	item_fragment.xml:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	item_fragment.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	item_fragment.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	item_fragment.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	item_fragment.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>	locale_edit.xml:['indicator']	app['indicator']	ui-unmatch
--------------------------------
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.support.v4.app.Fragment: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access', 'file']	app['access', 'file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	app:['access', 'file']	app['access', 'file']	ui-unmatch
--------------------------------
<android.support.v4.app.Fragment: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.graphics.LightingColorFilter: void <init>(int,int)>	app:['light']	app['light']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileReader: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileReader: int read(char[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getHost()>	app:['url', 'host']	app['url', 'host']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.lang.String getContentType()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	download_list.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String toString()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	download_list.xml:['file']	app['file']	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	download_list.xml:['medium', 'store', 'audio', 'medium']	app['medium', 'store', 'audio', 'medium']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.Object getContent()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.support.v4.app.ListFragment: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.addextras.com.noinnion.android.greader.reader.action.START_START_DOWNLOADING: void <init>()>	app:[]	app[]
<android.addextras.com.noinnion.android.greader.reader_history: void <init>()>	app:['history']	app['history']	ui-unmatch
<android.addextras.com.noinnion.android.greader.reader_history: void <init>()>	app:['history']	app['history']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.addextras.com.noinnion.android.greader.reader_history: void <init>()>	app:['history']	app['history']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	download_feed.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	about.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	about.xml:['script']	app['script']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void clearHistory()>	app:['history']	app['history']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>	widget_ticker_configure.xml:['indicator']	app['indicator']	ui-unmatch
--------------------------------
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.ExpandableListView: void setChoiceMode(int)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>	app:['indicator']	app['indicator']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	subscribe_browse.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getHost()>	app:['url', 'host']	app['url', 'host']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>	widget_icon_configure.xml:['indicator']	app['indicator']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.support.v4.app.ListFragment: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getHost()>	app:['url', 'host']	app['url', 'host']	ui-unmatch
--------------------------------
