<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: long skip(long)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	main.xml:['telephony']	app['telephony']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int available()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	main.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.addextras.sorturl: void <init>()>	bookshop_searchlist2.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	library_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	library_list.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	library_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	library_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	library_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	library_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	splash.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.addextras._url: void <init>()>	main.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.addextras.url: void <init>()>	pay_list.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	web_webview.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.addextras._url: void <init>()>	main.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.addextras.bookurl: void <init>()>	comments_standalone.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.addextras.url: void <init>()>	main.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	web_webview.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	web_webview.xml:[]	app[]
<android.addextras.url: void <init>()>	web_webview.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String toString()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	main.xml:['network']	app['network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[])>	main.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	download_list.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	download_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	download_list.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean exists()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	download_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	download_list.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	download_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void seek(long)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.io.RandomAccessFile: void write(byte[],int,int)>	download_list.xml:['access', 'file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	download_list.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	bookshop_searchlist2.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	bookshop_searchlist2.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	bookshop_searchlist2.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	library_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	library_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	library_list.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	library_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
