<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setVolume(float,float)>	main.xml:['medium', 'player', 'volume']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void cancel()>	your_record.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	your_record.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	your_record.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	your_record.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	intermediate.xml:['location']	app[]	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	intermediate.xml:['clock']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	intermediate.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	intermediate.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	intermediate.xml:['location']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	intermediate.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	intermediate.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	intermediate.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	intermediate.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	intermediate.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	intermediate.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	intermediate.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	intermediate.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	intermediate.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	main.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	main.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void pause()>	main.xml:['medium', 'player', 'pause']	app['medium', 'player', 'pause']	ui-unmatch
<android.widget.Chronometer: void stop()>	untangle.xml:['chronometer']	app['chronometer']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	untangle.xml:[]	app[]
<android.widget.Chronometer: long getBase()>	untangle.xml:['chronometer']	app['chronometer']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	main.xml:['clock']	app[]	ui-unmatch
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.Enumeration entries()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipEntry: boolean isDirectory()>	main.xml:['directory']	app['directory']	ui-unmatch
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	main.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main.xml:['permission']	app['permission']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setId(int)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.VideoView: void setVideoURI(android.net.Uri)>	main.xml:['video', 'video']	app['video', 'video']	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	main.xml:['video', 'medium']	app['video', 'medium']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setVisibility(int)>	main.xml:['video']	app['video']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	main.xml:['video', 'medium']	app['video', 'medium']	ui-unmatch
<android.widget.VideoView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void start()>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	main.xml:['video']	app['video']	ui-unmatch
<android.addextras.media_external_images_media: void <init>()>	main.xml:['medium', 'medium']	app['medium', 'medium']	ui-unmatch
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.addextras.com.android.vending.billing.PURCHASE_STATE_CHANGED: void <init>()>	app:[]	app[]
<android.addextras.com.example.dungeons.GET_PURCHASE_INFORMATION: void <init>()>	app:[]	app[]
--------------------------------
<java.util.Timer: void cancel()>	info.xml:['timer']	app['timer']	ui-unmatch
<android.app.Activity: void onPause()>	info.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	main.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	library_other_apps.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	help.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.Chronometer: java.lang.CharSequence getText()>	app:['chronometer']	app['chronometer']	ui-unmatch
<android.widget.Chronometer: void setTextColor(int)>	app:['chronometer']	app['chronometer']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	twitter.xml:['url']	app['url']	ui-unmatch
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>	twitter.xml:['address']	app['address']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	twitter.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	twitter.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	twitter.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	twitter.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: java.lang.String getName()>	twitter.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	twitter.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	twitter.xml:['file']	app['file']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	twitter.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getContentEncoding()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.util.Map getHeaderFields()>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	twitter.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	twitter.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>	twitter.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	your_record.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	settings.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.Chronometer: void stop()>	untangle.xml:['chronometer']	app['chronometer']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.Enumeration entries()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipEntry: boolean isDirectory()>	main.xml:['directory']	app['directory']	ui-unmatch
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	main.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main.xml:['permission']	app['permission']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setId(int)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.VideoView: void setVideoURI(android.net.Uri)>	main.xml:['video', 'video']	app['video', 'video']	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	main.xml:['video', 'medium']	app['video', 'medium']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setVisibility(int)>	main.xml:['video']	app['video']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	main.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	main.xml:['medium']	app['medium']	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	main.xml:['video', 'medium']	app['video', 'medium']	ui-unmatch
<android.widget.VideoView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void start()>	main.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	main.xml:['video']	app['video']	ui-unmatch
<android.addextras.media_external_images_media: void <init>()>	main.xml:['medium', 'medium']	app['medium', 'medium']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	main.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	twitter.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	untangle.xml:['pause']	app['pause']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	untangle.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	library_other_apps.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.ListActivity: void onPause()>	leaderboard.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void pause()>	main.xml:['medium', 'player', 'pause']	app['medium', 'player', 'pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	intermediate.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	untangle.xml:[]	app[]
<android.widget.Chronometer: void setBase(long)>	untangle.xml:['chronometer']	app['chronometer']	ui-unmatch
<android.widget.Chronometer: void start()>	untangle.xml:['chronometer']	app['chronometer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	untangle.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void getLocationOnScreen(int[])>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: boolean hasAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: long getTime()>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: float getAccuracy()>	your_record.xml:['location']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	your_record.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	your_record.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	your_record.xml:['location', 'location']	app[]	ui-unmatch
<android.location.Location: double getLongitude()>	your_record.xml:['location', 'longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	your_record.xml:['location', 'latitude']	app['latitude']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	your_record.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	your_record.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	your_record.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	your_record.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	your_record.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	leaderboard.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	leaderboard.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	leaderboard.xml:['country']	app['country']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	leaderboard.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	leaderboard.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	untangle.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
