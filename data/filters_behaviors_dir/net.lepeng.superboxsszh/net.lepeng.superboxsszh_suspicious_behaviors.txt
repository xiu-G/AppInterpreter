<android.app.ActivityManager$MemoryInfo: void <init>()>	main_killer.xml:['memory']	app[]	ui-unmatch
--------------------------------
<android.hardware.SensorManager: java.util.List getSensorList(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	filemanager.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	filemanager.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void start()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnClickListener(android.view.View$OnClickListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: android.view.SurfaceHolder getHolder()>	filemanager.xml:['video']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	filemanager.xml:['download']	app['download']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	filemanager.xml:['power']	app[]	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLongitude()>	filemanager.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	filemanager.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.telephony.CellLocation: void requestLocationUpdate()>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	filemanager.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	filemanager.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	filemanager.xml:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>	filemanager.xml:['location', 'network']	app['location', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	filemanager.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	filemanager.xml:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.NetworkInfo: boolean isRoaming()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	filemanager.xml:['file', 'access']	app['access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main_memory.xml:[]	app[]
<java.io.FileInputStream: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] values()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$State: int ordinal()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$State: int ordinal()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_safeguard.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	file_browser_layout.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	file_browser_layout.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:[]	app[]
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String[] list()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	file_browser_layout.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<java.io.File: java.io.File getParentFile()>	file_browser_layout.xml:['file', 'file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	file_browser_layout.xml:[]	app[]
<java.io.File: java.io.File getParentFile()>	file_browser_layout.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.lang.String)>	main_killer.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_killer.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	filemanager.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	filemanager.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void start()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnClickListener(android.view.View$OnClickListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: android.view.SurfaceHolder getHolder()>	filemanager.xml:['video']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	filemanager.xml:['download']	app['download']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	filemanager.xml:['power']	app[]	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLongitude()>	filemanager.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	filemanager.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.telephony.CellLocation: void requestLocationUpdate()>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	filemanager.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	filemanager.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	filemanager.xml:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>	filemanager.xml:['location', 'network']	app['location', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	filemanager.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	filemanager.xml:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.NetworkInfo: boolean isRoaming()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	filemanager.xml:['file', 'access']	app['access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main_memory.xml:[]	app[]
<java.io.FileInputStream: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	main_app2sd.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_app2sd.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_app2sd.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	main_app2sd.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_app2sd.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_uninstaller.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_uninstaller.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.addextras.telephony_carriers_current: void <init>()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	main_cacheclear.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_cacheclear.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_cacheclear.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_cacheclear.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_cacheclear.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	app:[]	app[]
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	first_main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	first_main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	first_main.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	first_main.xml:['network']	app['network']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFilesDir()>	first_main.xml:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	first_main.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	first_main.xml:[]	app[]
<java.io.File: long length()>	first_main.xml:[]	app[]
<java.io.File: java.io.File[] listFiles()>	first_main.xml:[]	app[]
<java.io.File: boolean isDirectory()>	first_main.xml:['directory']	app[]	ui-unmatch
<java.io.File: long length()>	first_main.xml:[]	app[]
<android.content.Context: java.io.File getFilesDir()>	first_main.xml:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	first_main.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	first_main.xml:[]	app[]
<java.io.File: boolean exists()>	first_main.xml:[]	app[]
<java.io.File: boolean isFile()>	first_main.xml:[]	app[]
<java.io.File: java.io.File[] listFiles()>	first_main.xml:[]	app[]
<java.io.File: boolean delete()>	first_main.xml:[]	app[]
<java.io.File: boolean isDirectory()>	first_main.xml:['directory']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	filelist.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filelist.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filelist.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	file_browser_layout.xml:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	file_browser_layout.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	file_browser_layout.xml:['file']	app[]	ui-unmatch
<android.addextras.FileFilter: void <init>()>	file_browser_layout.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_history.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main_killer.xml:['memory']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_killer.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_killer.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	filelist.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	filelist.xml:['calendar']	app['calendar']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filelist.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filelist.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filelist.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filelist.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filelist.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filelist.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	filelist.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filelist.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	filemanager.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	filemanager.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void start()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnClickListener(android.view.View$OnClickListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: android.view.SurfaceHolder getHolder()>	filemanager.xml:['video']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	filemanager.xml:['download']	app['download']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	filemanager.xml:['power']	app[]	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLongitude()>	filemanager.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	filemanager.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.telephony.CellLocation: void requestLocationUpdate()>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	filemanager.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	filemanager.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	filemanager.xml:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>	filemanager.xml:['location', 'network']	app['location', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	filemanager.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	filemanager.xml:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.NetworkInfo: boolean isRoaming()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	filemanager.xml:['file', 'access']	app['access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main_memory.xml:[]	app[]
<java.io.FileInputStream: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.Ringtone: void play()>	app:['ring', 'play']	app['ring', 'play']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_uninstaller.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	main_history.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_history.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_history.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	main_history.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_history.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_history.xml:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_cacheclear.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main_memory.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>	main_memory.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	main_memory.xml:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main_app2sd.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	main_app2sd.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_app2sd.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	filemanager.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	filemanager.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void start()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnClickListener(android.view.View$OnClickListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: android.view.SurfaceHolder getHolder()>	filemanager.xml:['video']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	filemanager.xml:['download']	app['download']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	filemanager.xml:['power']	app[]	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLongitude()>	filemanager.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	filemanager.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.telephony.CellLocation: void requestLocationUpdate()>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	filemanager.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	filemanager.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	filemanager.xml:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>	filemanager.xml:['location', 'network']	app['location', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	filemanager.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	filemanager.xml:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.NetworkInfo: boolean isRoaming()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	filemanager.xml:['file', 'access']	app['access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main_memory.xml:[]	app[]
<java.io.FileInputStream: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.media.Ringtone: void stop()>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.hardware.Sensor: int getType()>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_battery.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	main_memory.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_memory.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_memory.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	main_memory.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_memory.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	main_memory.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_memory.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_memory.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	main_memory.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main_memory.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_killer.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	filelist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getVibrateSetting(int)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$DetailedState: int ordinal()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$DetailedState: int ordinal()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_history.xml:['file']	app[]	ui-unmatch
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>	main_history.xml:['history']	app[]	ui-unmatch
<android.provider.SearchRecentSuggestions: void clearHistory()>	main_history.xml:['history']	app[]	ui-unmatch
<android.addextras.com.google.android.maps.SearchHistoryProvider_history: void <init>()>	main_history.xml:['history', 'history']	app[]	ui-unmatch
<android.provider.SearchRecentSuggestions: void clearHistory()>	main_history.xml:['history']	app[]	ui-unmatch
<android.provider.SearchRecentSuggestions: void clearHistory()>	main_history.xml:['history']	app[]	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	main_history.xml:['access']	app['access']	ui-unmatch
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	main_history.xml:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	app:['account', 'account']	app['account', 'account']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	filemanager.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	filelist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	filelist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>	app:['connectivity']	app['connectivity']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	app:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.net.NetworkInfo: int getType()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setVibrateSetting(int,int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	settings_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	flashlight.xml:['power']	app[]	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	flashlight.xml:['power']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void release()>	app:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	main_app2sd.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_app2sd.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_app2sd.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main_app2sd.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_app2sd.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_memory.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void release()>	flashlight.xml:['power']	app[]	ui-unmatch
<android.app.Activity: void onPause()>	flashlight.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getSubtypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_uninstaller.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	filemanager.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	filemanager.xml:['address']	app['address']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>	filemanager.xml:['medium', 'player', 'video']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	filemanager.xml:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void start()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	filemanager.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	filemanager.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	filemanager.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: void <init>(android.content.Context)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnClickListener(android.view.View$OnClickListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	filemanager.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: android.view.SurfaceHolder getHolder()>	filemanager.xml:['video']	app[]	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>	filemanager.xml:['download']	app['download']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	filemanager.xml:['power']	app[]	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLongitude()>	filemanager.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	filemanager.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.telephony.CellLocation: void requestLocationUpdate()>	filemanager.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	filemanager.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: int getPhoneType()>	filemanager.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
<android.net.NetworkInfo: int getType()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	filemanager.xml:['address']	app['address']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>	filemanager.xml:['location', 'network']	app['location', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>	filemanager.xml:['telephony', 'location']	app['telephony', 'location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getCid()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.gsm.GsmCellLocation: int getLac()>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	filemanager.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	filemanager.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	filemanager.xml:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	filemanager.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	filemanager.xml:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filemanager.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	filemanager.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.NetworkInfo: boolean isRoaming()>	filemanager.xml:['network']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	filemanager.xml:['timer']	app['timer']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>	filemanager.xml:['file', 'access']	app['access']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>	filemanager.xml:['location']	app['location']	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main_memory.xml:[]	app[]
<java.io.FileInputStream: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_memory.xml:['file']	app[]	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	main_memory.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	filemanager.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	filemanager.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	filemanager.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	filemanager.xml:['script']	app['script']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	filemanager.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	filemanager.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	filemanager.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	filemanager.xml:['file']	app[]	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	filemanager.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
