<android.app.Activity: void onPause()>	remover_ads.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	estadisticas.xml:['url']	app[]	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	mostrar_qr.xml:['location']	app[]	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	mostrar_qr.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.text.ClipboardManager: java.lang.CharSequence getText()>	remover_ads.xml:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	geo.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	geo.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	geo.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	geo.xml:['calendar']	app[]	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	geo.xml:['url']	app[]	ui-unmatch
<android.location.Address: void <init>(java.util.Locale)>	geo.xml:['address']	app[]	ui-unmatch
<android.location.Address: java.lang.String getSubLocality()>	geo.xml:['address']	app[]	ui-unmatch
<android.location.Address: java.lang.String getLocality()>	geo.xml:['address']	app[]	ui-unmatch
<android.location.Address: java.lang.String getSubAdminArea()>	geo.xml:['address']	app[]	ui-unmatch
<android.location.Address: java.lang.String getAdminArea()>	geo.xml:['address']	app[]	ui-unmatch
<android.location.Address: java.lang.String getCountryCode()>	geo.xml:['address', 'country']	app['country']	ui-unmatch
<android.location.Address: java.lang.String getCountryName()>	geo.xml:['address', 'country']	app['country']	ui-unmatch
<android.text.ClipboardManager: java.lang.CharSequence getText()>	texto_libre.xml:['clipboard']	app['clipboard']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	mostrar_qr.xml:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	mostrar_qr.xml:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	mostrar_qr.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	mostrar_qr.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	mostrar_qr.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	mostrar_qr.xml:['file', 'file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	mostrar_qr.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	mostrar_qr.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	mostrar_qr.xml:['file']	app[]	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	geo.xml:['permission']	app['permission']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	geo.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	geo.xml:['country']	app['country']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	geo.xml:['script']	app['script']	ui-unmatch
<android.text.ClipboardManager: java.lang.CharSequence getText()>	geo.xml:['clipboard']	app['clipboard']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	datos_contacto.xml:['url']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	imagen.xml:[]	app[]
<java.io.File: java.lang.String toString()>	imagen.xml:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	resultado.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<android.text.ClipboardManager: java.lang.CharSequence getText()>	lista_ads.xml:['clipboard']	app['clipboard']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	calendario.xml:[]	app[]
<java.util.Calendar: void add(int,int)>	calendario.xml:[]	app[]
<java.util.Calendar: void set(int,int)>	calendario.xml:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	calendario.xml:[]	app[]
<java.util.Calendar: int get(int)>	calendario.xml:[]	app[]
<java.util.Calendar: void setTime(java.util.Date)>	calendario.xml:[]	app[]
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tabs.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	tabs.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>	tabs.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	capture.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	resultado.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	mostrar_qr.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
--------------------------------
<android.widget.TabHost: int getCurrentTab()>	app:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	app:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	resultado.xml:['script']	app['script']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	resultado.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	resultado.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	resultado.xml:['clipboard']	app['clipboard']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	resultado.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>	resultado.xml:['connectivity']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: int getType()>	resultado.xml:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: int getSubtype()>	resultado.xml:['network']	app['network']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	imagen_url.xml:[]	app[]
<android.text.ClipboardManager: java.lang.CharSequence getText()>	imagen_url.xml:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.app.Activity: void onLowMemory()>	resultado.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	historial.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	historial.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	historial.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	historial.xml:['file', 'file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	historial.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	historial.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	mostrar_qr.xml:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	estadisticas.xml:['script']	app['script']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: int getPreviewFormat()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void startPreview()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	capture.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	capture.xml:['pause']	app['pause']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>	capture.xml:['sensor']	app['sensor']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void release()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	capture.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:['directory']	app['directory']	ui-unmatch
<java.io.File: boolean canWrite()>	app:[]	app[]
<java.io.File: boolean createNewFile()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: long lastModified()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.FileInputStream: void close()>	mostrar_qr.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
